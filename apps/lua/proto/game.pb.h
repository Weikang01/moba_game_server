// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto;
class CharacterInfo;
struct CharacterInfoDefaultTypeInternal;
extern CharacterInfoDefaultTypeInternal _CharacterInfo_default_instance_;
class EditProfileReq;
struct EditProfileReqDefaultTypeInternal;
extern EditProfileReqDefaultTypeInternal _EditProfileReq_default_instance_;
class EditProfileRes;
struct EditProfileResDefaultTypeInternal;
extern EditProfileResDefaultTypeInternal _EditProfileRes_default_instance_;
class EnterMatch;
struct EnterMatchDefaultTypeInternal;
extern EnterMatchDefaultTypeInternal _EnterMatch_default_instance_;
class EnterZoneReq;
struct EnterZoneReqDefaultTypeInternal;
extern EnterZoneReqDefaultTypeInternal _EnterZoneReq_default_instance_;
class EnterZoneRes;
struct EnterZoneResDefaultTypeInternal;
extern EnterZoneResDefaultTypeInternal _EnterZoneRes_default_instance_;
class FrameOpts;
struct FrameOptsDefaultTypeInternal;
extern FrameOptsDefaultTypeInternal _FrameOpts_default_instance_;
class GameFinishedRes;
struct GameFinishedResDefaultTypeInternal;
extern GameFinishedResDefaultTypeInternal _GameFinishedRes_default_instance_;
class GameStart;
struct GameStartDefaultTypeInternal;
extern GameStartDefaultTypeInternal _GameStart_default_instance_;
class GetSysMsgReq;
struct GetSysMsgReqDefaultTypeInternal;
extern GetSysMsgReqDefaultTypeInternal _GetSysMsgReq_default_instance_;
class GetSysMsgRes;
struct GetSysMsgResDefaultTypeInternal;
extern GetSysMsgResDefaultTypeInternal _GetSysMsgRes_default_instance_;
class GetUGameInfo;
struct GetUGameInfoDefaultTypeInternal;
extern GetUGameInfoDefaultTypeInternal _GetUGameInfo_default_instance_;
class GetUGameInfoRes;
struct GetUGameInfoResDefaultTypeInternal;
extern GetUGameInfoResDefaultTypeInternal _GetUGameInfoRes_default_instance_;
class GetWorldRankUchipRes;
struct GetWorldRankUchipResDefaultTypeInternal;
extern GetWorldRankUchipResDefaultTypeInternal _GetWorldRankUchipRes_default_instance_;
class GuestLoginReq;
struct GuestLoginReqDefaultTypeInternal;
extern GuestLoginReqDefaultTypeInternal _GuestLoginReq_default_instance_;
class GuestLoginRes;
struct GuestLoginResDefaultTypeInternal;
extern GuestLoginResDefaultTypeInternal _GuestLoginRes_default_instance_;
class GuestUpgradeReq;
struct GuestUpgradeReqDefaultTypeInternal;
extern GuestUpgradeReqDefaultTypeInternal _GuestUpgradeReq_default_instance_;
class GuestUpgradeRes;
struct GuestUpgradeResDefaultTypeInternal;
extern GuestUpgradeResDefaultTypeInternal _GuestUpgradeRes_default_instance_;
class LogicFrame;
struct LogicFrameDefaultTypeInternal;
extern LogicFrameDefaultTypeInternal _LogicFrame_default_instance_;
class LogicLoginReq;
struct LogicLoginReqDefaultTypeInternal;
extern LogicLoginReqDefaultTypeInternal _LogicLoginReq_default_instance_;
class LogicLoginRes;
struct LogicLoginResDefaultTypeInternal;
extern LogicLoginResDefaultTypeInternal _LogicLoginRes_default_instance_;
class LogoutRes;
struct LogoutResDefaultTypeInternal;
extern LogoutResDefaultTypeInternal _LogoutRes_default_instance_;
class NextFrameOpt;
struct NextFrameOptDefaultTypeInternal;
extern NextFrameOptDefaultTypeInternal _NextFrameOpt_default_instance_;
class OnOtherEnteredMatch;
struct OnOtherEnteredMatchDefaultTypeInternal;
extern OnOtherEnteredMatchDefaultTypeInternal _OnOtherEnteredMatch_default_instance_;
class OnOtherQuittedMatch;
struct OnOtherQuittedMatchDefaultTypeInternal;
extern OnOtherQuittedMatchDefaultTypeInternal _OnOtherQuittedMatch_default_instance_;
class OptionEvent;
struct OptionEventDefaultTypeInternal;
extern OptionEventDefaultTypeInternal _OptionEvent_default_instance_;
class QuitMatchRes;
struct QuitMatchResDefaultTypeInternal;
extern QuitMatchResDefaultTypeInternal _QuitMatchRes_default_instance_;
class RecvLoginBonusRes;
struct RecvLoginBonusResDefaultTypeInternal;
extern RecvLoginBonusResDefaultTypeInternal _RecvLoginBonusRes_default_instance_;
class UserCenterInfo;
struct UserCenterInfoDefaultTypeInternal;
extern UserCenterInfoDefaultTypeInternal _UserCenterInfo_default_instance_;
class UserLoginReq;
struct UserLoginReqDefaultTypeInternal;
extern UserLoginReqDefaultTypeInternal _UserLoginReq_default_instance_;
class UserLoginRes;
struct UserLoginResDefaultTypeInternal;
extern UserLoginResDefaultTypeInternal _UserLoginRes_default_instance_;
class WorldRankUchip;
struct WorldRankUchipDefaultTypeInternal;
extern WorldRankUchipDefaultTypeInternal _WorldRankUchip_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CharacterInfo* Arena::CreateMaybeMessage<::CharacterInfo>(Arena*);
template<> ::EditProfileReq* Arena::CreateMaybeMessage<::EditProfileReq>(Arena*);
template<> ::EditProfileRes* Arena::CreateMaybeMessage<::EditProfileRes>(Arena*);
template<> ::EnterMatch* Arena::CreateMaybeMessage<::EnterMatch>(Arena*);
template<> ::EnterZoneReq* Arena::CreateMaybeMessage<::EnterZoneReq>(Arena*);
template<> ::EnterZoneRes* Arena::CreateMaybeMessage<::EnterZoneRes>(Arena*);
template<> ::FrameOpts* Arena::CreateMaybeMessage<::FrameOpts>(Arena*);
template<> ::GameFinishedRes* Arena::CreateMaybeMessage<::GameFinishedRes>(Arena*);
template<> ::GameStart* Arena::CreateMaybeMessage<::GameStart>(Arena*);
template<> ::GetSysMsgReq* Arena::CreateMaybeMessage<::GetSysMsgReq>(Arena*);
template<> ::GetSysMsgRes* Arena::CreateMaybeMessage<::GetSysMsgRes>(Arena*);
template<> ::GetUGameInfo* Arena::CreateMaybeMessage<::GetUGameInfo>(Arena*);
template<> ::GetUGameInfoRes* Arena::CreateMaybeMessage<::GetUGameInfoRes>(Arena*);
template<> ::GetWorldRankUchipRes* Arena::CreateMaybeMessage<::GetWorldRankUchipRes>(Arena*);
template<> ::GuestLoginReq* Arena::CreateMaybeMessage<::GuestLoginReq>(Arena*);
template<> ::GuestLoginRes* Arena::CreateMaybeMessage<::GuestLoginRes>(Arena*);
template<> ::GuestUpgradeReq* Arena::CreateMaybeMessage<::GuestUpgradeReq>(Arena*);
template<> ::GuestUpgradeRes* Arena::CreateMaybeMessage<::GuestUpgradeRes>(Arena*);
template<> ::LogicFrame* Arena::CreateMaybeMessage<::LogicFrame>(Arena*);
template<> ::LogicLoginReq* Arena::CreateMaybeMessage<::LogicLoginReq>(Arena*);
template<> ::LogicLoginRes* Arena::CreateMaybeMessage<::LogicLoginRes>(Arena*);
template<> ::LogoutRes* Arena::CreateMaybeMessage<::LogoutRes>(Arena*);
template<> ::NextFrameOpt* Arena::CreateMaybeMessage<::NextFrameOpt>(Arena*);
template<> ::OnOtherEnteredMatch* Arena::CreateMaybeMessage<::OnOtherEnteredMatch>(Arena*);
template<> ::OnOtherQuittedMatch* Arena::CreateMaybeMessage<::OnOtherQuittedMatch>(Arena*);
template<> ::OptionEvent* Arena::CreateMaybeMessage<::OptionEvent>(Arena*);
template<> ::QuitMatchRes* Arena::CreateMaybeMessage<::QuitMatchRes>(Arena*);
template<> ::RecvLoginBonusRes* Arena::CreateMaybeMessage<::RecvLoginBonusRes>(Arena*);
template<> ::UserCenterInfo* Arena::CreateMaybeMessage<::UserCenterInfo>(Arena*);
template<> ::UserLoginReq* Arena::CreateMaybeMessage<::UserLoginReq>(Arena*);
template<> ::UserLoginRes* Arena::CreateMaybeMessage<::UserLoginRes>(Arena*);
template<> ::WorldRankUchip* Arena::CreateMaybeMessage<::WorldRankUchip>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Stype : int {
  INVALID_STYPE = 0,
  eAuth = 1,
  eSystem = 2,
  eLogic = 3,
  Stype_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Stype_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Stype_IsValid(int value);
constexpr Stype Stype_MIN = INVALID_STYPE;
constexpr Stype Stype_MAX = eLogic;
constexpr int Stype_ARRAYSIZE = Stype_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Stype_descriptor();
template<typename T>
inline const std::string& Stype_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Stype>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Stype_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Stype_descriptor(), enum_t_value);
}
inline bool Stype_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Stype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Stype>(
    Stype_descriptor(), name, value);
}
enum Cmd : int {
  INVALID_CMD = 0,
  eGuestLoginReq = 1,
  eGuestLoginRes = 2,
  eReloginRes = 3,
  eUserLostConn = 4,
  eEditProfileReq = 5,
  eEditProfileRes = 6,
  eGuestUpgradeReq = 7,
  eGuestUpgradeRes = 8,
  eUserLoginReq = 9,
  eUserLoginRes = 10,
  eLogoutReq = 11,
  eLogoutRes = 12,
  eGetUGameInfoReq = 13,
  eGetUGameInfoRes = 14,
  eRecvLoginBonusReq = 15,
  eRecvLoginBonusRes = 16,
  eGetWorldRankUchipReq = 17,
  eGetWorldRankUchipRes = 18,
  eGetSysMsgReq = 19,
  eGetSysMsgRes = 20,
  eLogicLoginReq = 21,
  eLogicLoginRes = 22,
  eEnterZoneReq = 23,
  eEnterZoneRes = 24,
  eEnterMatch = 25,
  eOnOtherEnteredMatch = 26,
  eQuitMatchReq = 27,
  eQuitMatchRes = 28,
  eOnOtherQuittedMatch = 29,
  eGameStart = 30,
  eLogicFrame = 31,
  eNextFrameOpt = 32,
  eGameFinishedReq = 33,
  eGameFinishedRes = 34,
  Cmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Cmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Cmd_IsValid(int value);
constexpr Cmd Cmd_MIN = INVALID_CMD;
constexpr Cmd Cmd_MAX = eGameFinishedRes;
constexpr int Cmd_ARRAYSIZE = Cmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cmd_descriptor();
template<typename T>
inline const std::string& Cmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cmd_descriptor(), enum_t_value);
}
inline bool Cmd_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cmd>(
    Cmd_descriptor(), name, value);
}
// ===================================================================

class GuestLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GuestLoginReq) */ {
 public:
  inline GuestLoginReq() : GuestLoginReq(nullptr) {}
  ~GuestLoginReq() override;
  explicit PROTOBUF_CONSTEXPR GuestLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuestLoginReq(const GuestLoginReq& from);
  GuestLoginReq(GuestLoginReq&& from) noexcept
    : GuestLoginReq() {
    *this = ::std::move(from);
  }

  inline GuestLoginReq& operator=(const GuestLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuestLoginReq& operator=(GuestLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuestLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuestLoginReq* internal_default_instance() {
    return reinterpret_cast<const GuestLoginReq*>(
               &_GuestLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GuestLoginReq& a, GuestLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GuestLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuestLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuestLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuestLoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuestLoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuestLoginReq& from) {
    GuestLoginReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuestLoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GuestLoginReq";
  }
  protected:
  explicit GuestLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuestKeyFieldNumber = 1,
  };
  // string guest_key = 1;
  void clear_guest_key();
  const std::string& guest_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guest_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guest_key();
  PROTOBUF_NODISCARD std::string* release_guest_key();
  void set_allocated_guest_key(std::string* guest_key);
  private:
  const std::string& _internal_guest_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guest_key(const std::string& value);
  std::string* _internal_mutable_guest_key();
  public:

  // @@protoc_insertion_point(class_scope:GuestLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guest_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class UserLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserLoginReq) */ {
 public:
  inline UserLoginReq() : UserLoginReq(nullptr) {}
  ~UserLoginReq() override;
  explicit PROTOBUF_CONSTEXPR UserLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLoginReq(const UserLoginReq& from);
  UserLoginReq(UserLoginReq&& from) noexcept
    : UserLoginReq() {
    *this = ::std::move(from);
  }

  inline UserLoginReq& operator=(const UserLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginReq& operator=(UserLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLoginReq* internal_default_instance() {
    return reinterpret_cast<const UserLoginReq*>(
               &_UserLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserLoginReq& a, UserLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLoginReq& from) {
    UserLoginReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserLoginReq";
  }
  protected:
  explicit UserLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnameFieldNumber = 1,
    kUpwdMd5FieldNumber = 2,
  };
  // string uname = 1;
  void clear_uname();
  const std::string& uname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uname();
  PROTOBUF_NODISCARD std::string* release_uname();
  void set_allocated_uname(std::string* uname);
  private:
  const std::string& _internal_uname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uname(const std::string& value);
  std::string* _internal_mutable_uname();
  public:

  // string upwd_md5 = 2;
  void clear_upwd_md5();
  const std::string& upwd_md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_upwd_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_upwd_md5();
  PROTOBUF_NODISCARD std::string* release_upwd_md5();
  void set_allocated_upwd_md5(std::string* upwd_md5);
  private:
  const std::string& _internal_upwd_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upwd_md5(const std::string& value);
  std::string* _internal_mutable_upwd_md5();
  public:

  // @@protoc_insertion_point(class_scope:UserLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upwd_md5_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class UserCenterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserCenterInfo) */ {
 public:
  inline UserCenterInfo() : UserCenterInfo(nullptr) {}
  ~UserCenterInfo() override;
  explicit PROTOBUF_CONSTEXPR UserCenterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserCenterInfo(const UserCenterInfo& from);
  UserCenterInfo(UserCenterInfo&& from) noexcept
    : UserCenterInfo() {
    *this = ::std::move(from);
  }

  inline UserCenterInfo& operator=(const UserCenterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserCenterInfo& operator=(UserCenterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserCenterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserCenterInfo* internal_default_instance() {
    return reinterpret_cast<const UserCenterInfo*>(
               &_UserCenterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserCenterInfo& a, UserCenterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserCenterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserCenterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserCenterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserCenterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserCenterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserCenterInfo& from) {
    UserCenterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserCenterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserCenterInfo";
  }
  protected:
  explicit UserCenterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnickFieldNumber = 1,
    kUsexFieldNumber = 2,
    kUsysavatarFieldNumber = 3,
    kUvipFieldNumber = 4,
    kUidFieldNumber = 5,
  };
  // string unick = 1;
  void clear_unick();
  const std::string& unick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unick();
  PROTOBUF_NODISCARD std::string* release_unick();
  void set_allocated_unick(std::string* unick);
  private:
  const std::string& _internal_unick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unick(const std::string& value);
  std::string* _internal_mutable_unick();
  public:

  // int32 usex = 2;
  void clear_usex();
  int32_t usex() const;
  void set_usex(int32_t value);
  private:
  int32_t _internal_usex() const;
  void _internal_set_usex(int32_t value);
  public:

  // int32 usysavatar = 3;
  void clear_usysavatar();
  int32_t usysavatar() const;
  void set_usysavatar(int32_t value);
  private:
  int32_t _internal_usysavatar() const;
  void _internal_set_usysavatar(int32_t value);
  public:

  // int32 uvip = 4;
  void clear_uvip();
  int32_t uvip() const;
  void set_uvip(int32_t value);
  private:
  int32_t _internal_uvip() const;
  void _internal_set_uvip(int32_t value);
  public:

  // int32 uid = 5;
  void clear_uid();
  int32_t uid() const;
  void set_uid(int32_t value);
  private:
  int32_t _internal_uid() const;
  void _internal_set_uid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UserCenterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unick_;
    int32_t usex_;
    int32_t usysavatar_;
    int32_t uvip_;
    int32_t uid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GuestLoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GuestLoginRes) */ {
 public:
  inline GuestLoginRes() : GuestLoginRes(nullptr) {}
  ~GuestLoginRes() override;
  explicit PROTOBUF_CONSTEXPR GuestLoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuestLoginRes(const GuestLoginRes& from);
  GuestLoginRes(GuestLoginRes&& from) noexcept
    : GuestLoginRes() {
    *this = ::std::move(from);
  }

  inline GuestLoginRes& operator=(const GuestLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuestLoginRes& operator=(GuestLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuestLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuestLoginRes* internal_default_instance() {
    return reinterpret_cast<const GuestLoginRes*>(
               &_GuestLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GuestLoginRes& a, GuestLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GuestLoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuestLoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuestLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuestLoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuestLoginRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuestLoginRes& from) {
    GuestLoginRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuestLoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GuestLoginRes";
  }
  protected:
  explicit GuestLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinfoFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional .UserCenterInfo uinfo = 2;
  bool has_uinfo() const;
  private:
  bool _internal_has_uinfo() const;
  public:
  void clear_uinfo();
  const ::UserCenterInfo& uinfo() const;
  PROTOBUF_NODISCARD ::UserCenterInfo* release_uinfo();
  ::UserCenterInfo* mutable_uinfo();
  void set_allocated_uinfo(::UserCenterInfo* uinfo);
  private:
  const ::UserCenterInfo& _internal_uinfo() const;
  ::UserCenterInfo* _internal_mutable_uinfo();
  public:
  void unsafe_arena_set_allocated_uinfo(
      ::UserCenterInfo* uinfo);
  ::UserCenterInfo* unsafe_arena_release_uinfo();

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GuestLoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::UserCenterInfo* uinfo_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class UserLoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserLoginRes) */ {
 public:
  inline UserLoginRes() : UserLoginRes(nullptr) {}
  ~UserLoginRes() override;
  explicit PROTOBUF_CONSTEXPR UserLoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLoginRes(const UserLoginRes& from);
  UserLoginRes(UserLoginRes&& from) noexcept
    : UserLoginRes() {
    *this = ::std::move(from);
  }

  inline UserLoginRes& operator=(const UserLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginRes& operator=(UserLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLoginRes* internal_default_instance() {
    return reinterpret_cast<const UserLoginRes*>(
               &_UserLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserLoginRes& a, UserLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLoginRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLoginRes& from) {
    UserLoginRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserLoginRes";
  }
  protected:
  explicit UserLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinfoFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional .UserCenterInfo uinfo = 2;
  bool has_uinfo() const;
  private:
  bool _internal_has_uinfo() const;
  public:
  void clear_uinfo();
  const ::UserCenterInfo& uinfo() const;
  PROTOBUF_NODISCARD ::UserCenterInfo* release_uinfo();
  ::UserCenterInfo* mutable_uinfo();
  void set_allocated_uinfo(::UserCenterInfo* uinfo);
  private:
  const ::UserCenterInfo& _internal_uinfo() const;
  ::UserCenterInfo* _internal_mutable_uinfo();
  public:
  void unsafe_arena_set_allocated_uinfo(
      ::UserCenterInfo* uinfo);
  ::UserCenterInfo* unsafe_arena_release_uinfo();

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UserLoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::UserCenterInfo* uinfo_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EditProfileReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditProfileReq) */ {
 public:
  inline EditProfileReq() : EditProfileReq(nullptr) {}
  ~EditProfileReq() override;
  explicit PROTOBUF_CONSTEXPR EditProfileReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditProfileReq(const EditProfileReq& from);
  EditProfileReq(EditProfileReq&& from) noexcept
    : EditProfileReq() {
    *this = ::std::move(from);
  }

  inline EditProfileReq& operator=(const EditProfileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditProfileReq& operator=(EditProfileReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditProfileReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditProfileReq* internal_default_instance() {
    return reinterpret_cast<const EditProfileReq*>(
               &_EditProfileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EditProfileReq& a, EditProfileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EditProfileReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditProfileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditProfileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditProfileReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EditProfileReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EditProfileReq& from) {
    EditProfileReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditProfileReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditProfileReq";
  }
  protected:
  explicit EditProfileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnickFieldNumber = 1,
    kUsexFieldNumber = 2,
    kUsysavatarFieldNumber = 3,
  };
  // string unick = 1;
  void clear_unick();
  const std::string& unick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unick();
  PROTOBUF_NODISCARD std::string* release_unick();
  void set_allocated_unick(std::string* unick);
  private:
  const std::string& _internal_unick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unick(const std::string& value);
  std::string* _internal_mutable_unick();
  public:

  // int32 usex = 2;
  void clear_usex();
  int32_t usex() const;
  void set_usex(int32_t value);
  private:
  int32_t _internal_usex() const;
  void _internal_set_usex(int32_t value);
  public:

  // int32 usysavatar = 3;
  void clear_usysavatar();
  int32_t usysavatar() const;
  void set_usysavatar(int32_t value);
  private:
  int32_t _internal_usysavatar() const;
  void _internal_set_usysavatar(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EditProfileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unick_;
    int32_t usex_;
    int32_t usysavatar_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EditProfileRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditProfileRes) */ {
 public:
  inline EditProfileRes() : EditProfileRes(nullptr) {}
  ~EditProfileRes() override;
  explicit PROTOBUF_CONSTEXPR EditProfileRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditProfileRes(const EditProfileRes& from);
  EditProfileRes(EditProfileRes&& from) noexcept
    : EditProfileRes() {
    *this = ::std::move(from);
  }

  inline EditProfileRes& operator=(const EditProfileRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditProfileRes& operator=(EditProfileRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditProfileRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditProfileRes* internal_default_instance() {
    return reinterpret_cast<const EditProfileRes*>(
               &_EditProfileRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EditProfileRes& a, EditProfileRes& b) {
    a.Swap(&b);
  }
  inline void Swap(EditProfileRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditProfileRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditProfileRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditProfileRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EditProfileRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EditProfileRes& from) {
    EditProfileRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditProfileRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditProfileRes";
  }
  protected:
  explicit EditProfileRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EditProfileRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GuestUpgradeReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GuestUpgradeReq) */ {
 public:
  inline GuestUpgradeReq() : GuestUpgradeReq(nullptr) {}
  ~GuestUpgradeReq() override;
  explicit PROTOBUF_CONSTEXPR GuestUpgradeReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuestUpgradeReq(const GuestUpgradeReq& from);
  GuestUpgradeReq(GuestUpgradeReq&& from) noexcept
    : GuestUpgradeReq() {
    *this = ::std::move(from);
  }

  inline GuestUpgradeReq& operator=(const GuestUpgradeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuestUpgradeReq& operator=(GuestUpgradeReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuestUpgradeReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuestUpgradeReq* internal_default_instance() {
    return reinterpret_cast<const GuestUpgradeReq*>(
               &_GuestUpgradeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GuestUpgradeReq& a, GuestUpgradeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GuestUpgradeReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuestUpgradeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuestUpgradeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuestUpgradeReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuestUpgradeReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuestUpgradeReq& from) {
    GuestUpgradeReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuestUpgradeReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GuestUpgradeReq";
  }
  protected:
  explicit GuestUpgradeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnameFieldNumber = 1,
    kUpwdMd5FieldNumber = 2,
  };
  // string uname = 1;
  void clear_uname();
  const std::string& uname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uname();
  PROTOBUF_NODISCARD std::string* release_uname();
  void set_allocated_uname(std::string* uname);
  private:
  const std::string& _internal_uname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uname(const std::string& value);
  std::string* _internal_mutable_uname();
  public:

  // string upwd_md5 = 2;
  void clear_upwd_md5();
  const std::string& upwd_md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_upwd_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_upwd_md5();
  PROTOBUF_NODISCARD std::string* release_upwd_md5();
  void set_allocated_upwd_md5(std::string* upwd_md5);
  private:
  const std::string& _internal_upwd_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upwd_md5(const std::string& value);
  std::string* _internal_mutable_upwd_md5();
  public:

  // @@protoc_insertion_point(class_scope:GuestUpgradeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upwd_md5_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GuestUpgradeRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GuestUpgradeRes) */ {
 public:
  inline GuestUpgradeRes() : GuestUpgradeRes(nullptr) {}
  ~GuestUpgradeRes() override;
  explicit PROTOBUF_CONSTEXPR GuestUpgradeRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuestUpgradeRes(const GuestUpgradeRes& from);
  GuestUpgradeRes(GuestUpgradeRes&& from) noexcept
    : GuestUpgradeRes() {
    *this = ::std::move(from);
  }

  inline GuestUpgradeRes& operator=(const GuestUpgradeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuestUpgradeRes& operator=(GuestUpgradeRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuestUpgradeRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuestUpgradeRes* internal_default_instance() {
    return reinterpret_cast<const GuestUpgradeRes*>(
               &_GuestUpgradeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GuestUpgradeRes& a, GuestUpgradeRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GuestUpgradeRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuestUpgradeRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuestUpgradeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuestUpgradeRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuestUpgradeRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuestUpgradeRes& from) {
    GuestUpgradeRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuestUpgradeRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GuestUpgradeRes";
  }
  protected:
  explicit GuestUpgradeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GuestUpgradeRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class LogoutRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogoutRes) */ {
 public:
  inline LogoutRes() : LogoutRes(nullptr) {}
  ~LogoutRes() override;
  explicit PROTOBUF_CONSTEXPR LogoutRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogoutRes(const LogoutRes& from);
  LogoutRes(LogoutRes&& from) noexcept
    : LogoutRes() {
    *this = ::std::move(from);
  }

  inline LogoutRes& operator=(const LogoutRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutRes& operator=(LogoutRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogoutRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogoutRes* internal_default_instance() {
    return reinterpret_cast<const LogoutRes*>(
               &_LogoutRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LogoutRes& a, LogoutRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogoutRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogoutRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogoutRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogoutRes& from) {
    LogoutRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogoutRes";
  }
  protected:
  explicit LogoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LogoutRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GetUGameInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetUGameInfo) */ {
 public:
  inline GetUGameInfo() : GetUGameInfo(nullptr) {}
  ~GetUGameInfo() override;
  explicit PROTOBUF_CONSTEXPR GetUGameInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUGameInfo(const GetUGameInfo& from);
  GetUGameInfo(GetUGameInfo&& from) noexcept
    : GetUGameInfo() {
    *this = ::std::move(from);
  }

  inline GetUGameInfo& operator=(const GetUGameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUGameInfo& operator=(GetUGameInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUGameInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUGameInfo* internal_default_instance() {
    return reinterpret_cast<const GetUGameInfo*>(
               &_GetUGameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetUGameInfo& a, GetUGameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUGameInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUGameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUGameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUGameInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUGameInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUGameInfo& from) {
    GetUGameInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUGameInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetUGameInfo";
  }
  protected:
  explicit GetUGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUchipFieldNumber = 1,
    kUexpFieldNumber = 2,
    kUvipFieldNumber = 3,
    kUchip2FieldNumber = 4,
    kUchip3FieldNumber = 5,
    kUdata1FieldNumber = 6,
    kUdata2FieldNumber = 7,
    kUdata3FieldNumber = 8,
  };
  // int32 uchip = 1;
  void clear_uchip();
  int32_t uchip() const;
  void set_uchip(int32_t value);
  private:
  int32_t _internal_uchip() const;
  void _internal_set_uchip(int32_t value);
  public:

  // int32 uexp = 2;
  void clear_uexp();
  int32_t uexp() const;
  void set_uexp(int32_t value);
  private:
  int32_t _internal_uexp() const;
  void _internal_set_uexp(int32_t value);
  public:

  // int32 uvip = 3;
  void clear_uvip();
  int32_t uvip() const;
  void set_uvip(int32_t value);
  private:
  int32_t _internal_uvip() const;
  void _internal_set_uvip(int32_t value);
  public:

  // int32 uchip2 = 4;
  void clear_uchip2();
  int32_t uchip2() const;
  void set_uchip2(int32_t value);
  private:
  int32_t _internal_uchip2() const;
  void _internal_set_uchip2(int32_t value);
  public:

  // int32 uchip3 = 5;
  void clear_uchip3();
  int32_t uchip3() const;
  void set_uchip3(int32_t value);
  private:
  int32_t _internal_uchip3() const;
  void _internal_set_uchip3(int32_t value);
  public:

  // int32 udata1 = 6;
  void clear_udata1();
  int32_t udata1() const;
  void set_udata1(int32_t value);
  private:
  int32_t _internal_udata1() const;
  void _internal_set_udata1(int32_t value);
  public:

  // int32 udata2 = 7;
  void clear_udata2();
  int32_t udata2() const;
  void set_udata2(int32_t value);
  private:
  int32_t _internal_udata2() const;
  void _internal_set_udata2(int32_t value);
  public:

  // int32 udata3 = 8;
  void clear_udata3();
  int32_t udata3() const;
  void set_udata3(int32_t value);
  private:
  int32_t _internal_udata3() const;
  void _internal_set_udata3(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetUGameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t uchip_;
    int32_t uexp_;
    int32_t uvip_;
    int32_t uchip2_;
    int32_t uchip3_;
    int32_t udata1_;
    int32_t udata2_;
    int32_t udata3_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GetUGameInfoRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetUGameInfoRes) */ {
 public:
  inline GetUGameInfoRes() : GetUGameInfoRes(nullptr) {}
  ~GetUGameInfoRes() override;
  explicit PROTOBUF_CONSTEXPR GetUGameInfoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUGameInfoRes(const GetUGameInfoRes& from);
  GetUGameInfoRes(GetUGameInfoRes&& from) noexcept
    : GetUGameInfoRes() {
    *this = ::std::move(from);
  }

  inline GetUGameInfoRes& operator=(const GetUGameInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUGameInfoRes& operator=(GetUGameInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUGameInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUGameInfoRes* internal_default_instance() {
    return reinterpret_cast<const GetUGameInfoRes*>(
               &_GetUGameInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetUGameInfoRes& a, GetUGameInfoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUGameInfoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUGameInfoRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUGameInfoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUGameInfoRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUGameInfoRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUGameInfoRes& from) {
    GetUGameInfoRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUGameInfoRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetUGameInfoRes";
  }
  protected:
  explicit GetUGameInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinfoFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional .GetUGameInfo uinfo = 2;
  bool has_uinfo() const;
  private:
  bool _internal_has_uinfo() const;
  public:
  void clear_uinfo();
  const ::GetUGameInfo& uinfo() const;
  PROTOBUF_NODISCARD ::GetUGameInfo* release_uinfo();
  ::GetUGameInfo* mutable_uinfo();
  void set_allocated_uinfo(::GetUGameInfo* uinfo);
  private:
  const ::GetUGameInfo& _internal_uinfo() const;
  ::GetUGameInfo* _internal_mutable_uinfo();
  public:
  void unsafe_arena_set_allocated_uinfo(
      ::GetUGameInfo* uinfo);
  ::GetUGameInfo* unsafe_arena_release_uinfo();

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetUGameInfoRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::GetUGameInfo* uinfo_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class RecvLoginBonusRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RecvLoginBonusRes) */ {
 public:
  inline RecvLoginBonusRes() : RecvLoginBonusRes(nullptr) {}
  ~RecvLoginBonusRes() override;
  explicit PROTOBUF_CONSTEXPR RecvLoginBonusRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecvLoginBonusRes(const RecvLoginBonusRes& from);
  RecvLoginBonusRes(RecvLoginBonusRes&& from) noexcept
    : RecvLoginBonusRes() {
    *this = ::std::move(from);
  }

  inline RecvLoginBonusRes& operator=(const RecvLoginBonusRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecvLoginBonusRes& operator=(RecvLoginBonusRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecvLoginBonusRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecvLoginBonusRes* internal_default_instance() {
    return reinterpret_cast<const RecvLoginBonusRes*>(
               &_RecvLoginBonusRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RecvLoginBonusRes& a, RecvLoginBonusRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RecvLoginBonusRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecvLoginBonusRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecvLoginBonusRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecvLoginBonusRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecvLoginBonusRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecvLoginBonusRes& from) {
    RecvLoginBonusRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecvLoginBonusRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RecvLoginBonusRes";
  }
  protected:
  explicit RecvLoginBonusRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RecvLoginBonusRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class WorldRankUchip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldRankUchip) */ {
 public:
  inline WorldRankUchip() : WorldRankUchip(nullptr) {}
  ~WorldRankUchip() override;
  explicit PROTOBUF_CONSTEXPR WorldRankUchip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldRankUchip(const WorldRankUchip& from);
  WorldRankUchip(WorldRankUchip&& from) noexcept
    : WorldRankUchip() {
    *this = ::std::move(from);
  }

  inline WorldRankUchip& operator=(const WorldRankUchip& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldRankUchip& operator=(WorldRankUchip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldRankUchip& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldRankUchip* internal_default_instance() {
    return reinterpret_cast<const WorldRankUchip*>(
               &_WorldRankUchip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(WorldRankUchip& a, WorldRankUchip& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldRankUchip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldRankUchip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldRankUchip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldRankUchip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldRankUchip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorldRankUchip& from) {
    WorldRankUchip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldRankUchip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorldRankUchip";
  }
  protected:
  explicit WorldRankUchip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnickFieldNumber = 1,
    kUsexFieldNumber = 2,
    kUsysavatarFieldNumber = 3,
    kUvipFieldNumber = 4,
    kUchipFieldNumber = 5,
  };
  // string unick = 1;
  void clear_unick();
  const std::string& unick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unick();
  PROTOBUF_NODISCARD std::string* release_unick();
  void set_allocated_unick(std::string* unick);
  private:
  const std::string& _internal_unick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unick(const std::string& value);
  std::string* _internal_mutable_unick();
  public:

  // int32 usex = 2;
  void clear_usex();
  int32_t usex() const;
  void set_usex(int32_t value);
  private:
  int32_t _internal_usex() const;
  void _internal_set_usex(int32_t value);
  public:

  // int32 usysavatar = 3;
  void clear_usysavatar();
  int32_t usysavatar() const;
  void set_usysavatar(int32_t value);
  private:
  int32_t _internal_usysavatar() const;
  void _internal_set_usysavatar(int32_t value);
  public:

  // int32 uvip = 4;
  void clear_uvip();
  int32_t uvip() const;
  void set_uvip(int32_t value);
  private:
  int32_t _internal_uvip() const;
  void _internal_set_uvip(int32_t value);
  public:

  // int32 uchip = 5;
  void clear_uchip();
  int32_t uchip() const;
  void set_uchip(int32_t value);
  private:
  int32_t _internal_uchip() const;
  void _internal_set_uchip(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:WorldRankUchip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unick_;
    int32_t usex_;
    int32_t usysavatar_;
    int32_t uvip_;
    int32_t uchip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GetWorldRankUchipRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetWorldRankUchipRes) */ {
 public:
  inline GetWorldRankUchipRes() : GetWorldRankUchipRes(nullptr) {}
  ~GetWorldRankUchipRes() override;
  explicit PROTOBUF_CONSTEXPR GetWorldRankUchipRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWorldRankUchipRes(const GetWorldRankUchipRes& from);
  GetWorldRankUchipRes(GetWorldRankUchipRes&& from) noexcept
    : GetWorldRankUchipRes() {
    *this = ::std::move(from);
  }

  inline GetWorldRankUchipRes& operator=(const GetWorldRankUchipRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorldRankUchipRes& operator=(GetWorldRankUchipRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorldRankUchipRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorldRankUchipRes* internal_default_instance() {
    return reinterpret_cast<const GetWorldRankUchipRes*>(
               &_GetWorldRankUchipRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetWorldRankUchipRes& a, GetWorldRankUchipRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorldRankUchipRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorldRankUchipRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorldRankUchipRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWorldRankUchipRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWorldRankUchipRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWorldRankUchipRes& from) {
    GetWorldRankUchipRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorldRankUchipRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetWorldRankUchipRes";
  }
  protected:
  explicit GetWorldRankUchipRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankInfoFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .WorldRankUchip rank_info = 2;
  int rank_info_size() const;
  private:
  int _internal_rank_info_size() const;
  public:
  void clear_rank_info();
  ::WorldRankUchip* mutable_rank_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorldRankUchip >*
      mutable_rank_info();
  private:
  const ::WorldRankUchip& _internal_rank_info(int index) const;
  ::WorldRankUchip* _internal_add_rank_info();
  public:
  const ::WorldRankUchip& rank_info(int index) const;
  ::WorldRankUchip* add_rank_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorldRankUchip >&
      rank_info() const;

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetWorldRankUchipRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorldRankUchip > rank_info_;
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GetSysMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSysMsgReq) */ {
 public:
  inline GetSysMsgReq() : GetSysMsgReq(nullptr) {}
  ~GetSysMsgReq() override;
  explicit PROTOBUF_CONSTEXPR GetSysMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSysMsgReq(const GetSysMsgReq& from);
  GetSysMsgReq(GetSysMsgReq&& from) noexcept
    : GetSysMsgReq() {
    *this = ::std::move(from);
  }

  inline GetSysMsgReq& operator=(const GetSysMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSysMsgReq& operator=(GetSysMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSysMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSysMsgReq* internal_default_instance() {
    return reinterpret_cast<const GetSysMsgReq*>(
               &_GetSysMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetSysMsgReq& a, GetSysMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSysMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSysMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSysMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSysMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSysMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSysMsgReq& from) {
    GetSysMsgReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSysMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSysMsgReq";
  }
  protected:
  explicit GetSysMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerNumFieldNumber = 1,
  };
  // int32 ver_num = 1;
  void clear_ver_num();
  int32_t ver_num() const;
  void set_ver_num(int32_t value);
  private:
  int32_t _internal_ver_num() const;
  void _internal_set_ver_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetSysMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t ver_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GetSysMsgRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSysMsgRes) */ {
 public:
  inline GetSysMsgRes() : GetSysMsgRes(nullptr) {}
  ~GetSysMsgRes() override;
  explicit PROTOBUF_CONSTEXPR GetSysMsgRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSysMsgRes(const GetSysMsgRes& from);
  GetSysMsgRes(GetSysMsgRes&& from) noexcept
    : GetSysMsgRes() {
    *this = ::std::move(from);
  }

  inline GetSysMsgRes& operator=(const GetSysMsgRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSysMsgRes& operator=(GetSysMsgRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSysMsgRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSysMsgRes* internal_default_instance() {
    return reinterpret_cast<const GetSysMsgRes*>(
               &_GetSysMsgRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetSysMsgRes& a, GetSysMsgRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSysMsgRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSysMsgRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSysMsgRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSysMsgRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSysMsgRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSysMsgRes& from) {
    GetSysMsgRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSysMsgRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSysMsgRes";
  }
  protected:
  explicit GetSysMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSysMsgsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kVerNumFieldNumber = 2,
  };
  // repeated string sys_msgs = 3;
  int sys_msgs_size() const;
  private:
  int _internal_sys_msgs_size() const;
  public:
  void clear_sys_msgs();
  const std::string& sys_msgs(int index) const;
  std::string* mutable_sys_msgs(int index);
  void set_sys_msgs(int index, const std::string& value);
  void set_sys_msgs(int index, std::string&& value);
  void set_sys_msgs(int index, const char* value);
  void set_sys_msgs(int index, const char* value, size_t size);
  std::string* add_sys_msgs();
  void add_sys_msgs(const std::string& value);
  void add_sys_msgs(std::string&& value);
  void add_sys_msgs(const char* value);
  void add_sys_msgs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sys_msgs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sys_msgs();
  private:
  const std::string& _internal_sys_msgs(int index) const;
  std::string* _internal_add_sys_msgs();
  public:

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // int32 ver_num = 2;
  void clear_ver_num();
  int32_t ver_num() const;
  void set_ver_num(int32_t value);
  private:
  int32_t _internal_ver_num() const;
  void _internal_set_ver_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetSysMsgRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sys_msgs_;
    int32_t status_;
    int32_t ver_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class LogicLoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicLoginRes) */ {
 public:
  inline LogicLoginRes() : LogicLoginRes(nullptr) {}
  ~LogicLoginRes() override;
  explicit PROTOBUF_CONSTEXPR LogicLoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicLoginRes(const LogicLoginRes& from);
  LogicLoginRes(LogicLoginRes&& from) noexcept
    : LogicLoginRes() {
    *this = ::std::move(from);
  }

  inline LogicLoginRes& operator=(const LogicLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicLoginRes& operator=(LogicLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicLoginRes* internal_default_instance() {
    return reinterpret_cast<const LogicLoginRes*>(
               &_LogicLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LogicLoginRes& a, LogicLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicLoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicLoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicLoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogicLoginRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogicLoginRes& from) {
    LogicLoginRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicLoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicLoginRes";
  }
  protected:
  explicit LogicLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LogicLoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EnterZoneReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnterZoneReq) */ {
 public:
  inline EnterZoneReq() : EnterZoneReq(nullptr) {}
  ~EnterZoneReq() override;
  explicit PROTOBUF_CONSTEXPR EnterZoneReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterZoneReq(const EnterZoneReq& from);
  EnterZoneReq(EnterZoneReq&& from) noexcept
    : EnterZoneReq() {
    *this = ::std::move(from);
  }

  inline EnterZoneReq& operator=(const EnterZoneReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterZoneReq& operator=(EnterZoneReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterZoneReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterZoneReq* internal_default_instance() {
    return reinterpret_cast<const EnterZoneReq*>(
               &_EnterZoneReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(EnterZoneReq& a, EnterZoneReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterZoneReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterZoneReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnterZoneReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnterZoneReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnterZoneReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnterZoneReq& from) {
    EnterZoneReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterZoneReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnterZoneReq";
  }
  protected:
  explicit EnterZoneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZidFieldNumber = 1,
  };
  // int32 zid = 1;
  void clear_zid();
  int32_t zid() const;
  void set_zid(int32_t value);
  private:
  int32_t _internal_zid() const;
  void _internal_set_zid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EnterZoneReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t zid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EnterZoneRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnterZoneRes) */ {
 public:
  inline EnterZoneRes() : EnterZoneRes(nullptr) {}
  ~EnterZoneRes() override;
  explicit PROTOBUF_CONSTEXPR EnterZoneRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterZoneRes(const EnterZoneRes& from);
  EnterZoneRes(EnterZoneRes&& from) noexcept
    : EnterZoneRes() {
    *this = ::std::move(from);
  }

  inline EnterZoneRes& operator=(const EnterZoneRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterZoneRes& operator=(EnterZoneRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterZoneRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterZoneRes* internal_default_instance() {
    return reinterpret_cast<const EnterZoneRes*>(
               &_EnterZoneRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(EnterZoneRes& a, EnterZoneRes& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterZoneRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterZoneRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnterZoneRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnterZoneRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnterZoneRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnterZoneRes& from) {
    EnterZoneRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterZoneRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnterZoneRes";
  }
  protected:
  explicit EnterZoneRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EnterZoneRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class OnOtherEnteredMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OnOtherEnteredMatch) */ {
 public:
  inline OnOtherEnteredMatch() : OnOtherEnteredMatch(nullptr) {}
  ~OnOtherEnteredMatch() override;
  explicit PROTOBUF_CONSTEXPR OnOtherEnteredMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnOtherEnteredMatch(const OnOtherEnteredMatch& from);
  OnOtherEnteredMatch(OnOtherEnteredMatch&& from) noexcept
    : OnOtherEnteredMatch() {
    *this = ::std::move(from);
  }

  inline OnOtherEnteredMatch& operator=(const OnOtherEnteredMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnOtherEnteredMatch& operator=(OnOtherEnteredMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnOtherEnteredMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnOtherEnteredMatch* internal_default_instance() {
    return reinterpret_cast<const OnOtherEnteredMatch*>(
               &_OnOtherEnteredMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(OnOtherEnteredMatch& a, OnOtherEnteredMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(OnOtherEnteredMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnOtherEnteredMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnOtherEnteredMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnOtherEnteredMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OnOtherEnteredMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OnOtherEnteredMatch& from) {
    OnOtherEnteredMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnOtherEnteredMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OnOtherEnteredMatch";
  }
  protected:
  explicit OnOtherEnteredMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnickFieldNumber = 1,
    kUsexFieldNumber = 2,
    kUsysavatarFieldNumber = 3,
    kSeatidFieldNumber = 4,
    kTeamidFieldNumber = 5,
  };
  // string unick = 1;
  void clear_unick();
  const std::string& unick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unick();
  PROTOBUF_NODISCARD std::string* release_unick();
  void set_allocated_unick(std::string* unick);
  private:
  const std::string& _internal_unick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unick(const std::string& value);
  std::string* _internal_mutable_unick();
  public:

  // int32 usex = 2;
  void clear_usex();
  int32_t usex() const;
  void set_usex(int32_t value);
  private:
  int32_t _internal_usex() const;
  void _internal_set_usex(int32_t value);
  public:

  // int32 usysavatar = 3;
  void clear_usysavatar();
  int32_t usysavatar() const;
  void set_usysavatar(int32_t value);
  private:
  int32_t _internal_usysavatar() const;
  void _internal_set_usysavatar(int32_t value);
  public:

  // int32 seatid = 4;
  void clear_seatid();
  int32_t seatid() const;
  void set_seatid(int32_t value);
  private:
  int32_t _internal_seatid() const;
  void _internal_set_seatid(int32_t value);
  public:

  // int32 teamid = 5;
  void clear_teamid();
  int32_t teamid() const;
  void set_teamid(int32_t value);
  private:
  int32_t _internal_teamid() const;
  void _internal_set_teamid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:OnOtherEnteredMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unick_;
    int32_t usex_;
    int32_t usysavatar_;
    int32_t seatid_;
    int32_t teamid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EnterMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnterMatch) */ {
 public:
  inline EnterMatch() : EnterMatch(nullptr) {}
  ~EnterMatch() override;
  explicit PROTOBUF_CONSTEXPR EnterMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterMatch(const EnterMatch& from);
  EnterMatch(EnterMatch&& from) noexcept
    : EnterMatch() {
    *this = ::std::move(from);
  }

  inline EnterMatch& operator=(const EnterMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterMatch& operator=(EnterMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterMatch* internal_default_instance() {
    return reinterpret_cast<const EnterMatch*>(
               &_EnterMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(EnterMatch& a, EnterMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnterMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnterMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnterMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnterMatch& from) {
    EnterMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnterMatch";
  }
  protected:
  explicit EnterMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherUinfoFieldNumber = 5,
    kZidFieldNumber = 1,
    kMatchidFieldNumber = 2,
    kSeatidFieldNumber = 3,
    kTeamidFieldNumber = 4,
  };
  // repeated .OnOtherEnteredMatch other_uinfo = 5;
  int other_uinfo_size() const;
  private:
  int _internal_other_uinfo_size() const;
  public:
  void clear_other_uinfo();
  ::OnOtherEnteredMatch* mutable_other_uinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OnOtherEnteredMatch >*
      mutable_other_uinfo();
  private:
  const ::OnOtherEnteredMatch& _internal_other_uinfo(int index) const;
  ::OnOtherEnteredMatch* _internal_add_other_uinfo();
  public:
  const ::OnOtherEnteredMatch& other_uinfo(int index) const;
  ::OnOtherEnteredMatch* add_other_uinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OnOtherEnteredMatch >&
      other_uinfo() const;

  // int32 zid = 1;
  void clear_zid();
  int32_t zid() const;
  void set_zid(int32_t value);
  private:
  int32_t _internal_zid() const;
  void _internal_set_zid(int32_t value);
  public:

  // int32 matchid = 2;
  void clear_matchid();
  int32_t matchid() const;
  void set_matchid(int32_t value);
  private:
  int32_t _internal_matchid() const;
  void _internal_set_matchid(int32_t value);
  public:

  // int32 seatid = 3;
  void clear_seatid();
  int32_t seatid() const;
  void set_seatid(int32_t value);
  private:
  int32_t _internal_seatid() const;
  void _internal_set_seatid(int32_t value);
  public:

  // int32 teamid = 4;
  void clear_teamid();
  int32_t teamid() const;
  void set_teamid(int32_t value);
  private:
  int32_t _internal_teamid() const;
  void _internal_set_teamid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EnterMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OnOtherEnteredMatch > other_uinfo_;
    int32_t zid_;
    int32_t matchid_;
    int32_t seatid_;
    int32_t teamid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class QuitMatchRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QuitMatchRes) */ {
 public:
  inline QuitMatchRes() : QuitMatchRes(nullptr) {}
  ~QuitMatchRes() override;
  explicit PROTOBUF_CONSTEXPR QuitMatchRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuitMatchRes(const QuitMatchRes& from);
  QuitMatchRes(QuitMatchRes&& from) noexcept
    : QuitMatchRes() {
    *this = ::std::move(from);
  }

  inline QuitMatchRes& operator=(const QuitMatchRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitMatchRes& operator=(QuitMatchRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuitMatchRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuitMatchRes* internal_default_instance() {
    return reinterpret_cast<const QuitMatchRes*>(
               &_QuitMatchRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(QuitMatchRes& a, QuitMatchRes& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitMatchRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuitMatchRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuitMatchRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuitMatchRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuitMatchRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuitMatchRes& from) {
    QuitMatchRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitMatchRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QuitMatchRes";
  }
  protected:
  explicit QuitMatchRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:QuitMatchRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class OnOtherQuittedMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OnOtherQuittedMatch) */ {
 public:
  inline OnOtherQuittedMatch() : OnOtherQuittedMatch(nullptr) {}
  ~OnOtherQuittedMatch() override;
  explicit PROTOBUF_CONSTEXPR OnOtherQuittedMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnOtherQuittedMatch(const OnOtherQuittedMatch& from);
  OnOtherQuittedMatch(OnOtherQuittedMatch&& from) noexcept
    : OnOtherQuittedMatch() {
    *this = ::std::move(from);
  }

  inline OnOtherQuittedMatch& operator=(const OnOtherQuittedMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnOtherQuittedMatch& operator=(OnOtherQuittedMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnOtherQuittedMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnOtherQuittedMatch* internal_default_instance() {
    return reinterpret_cast<const OnOtherQuittedMatch*>(
               &_OnOtherQuittedMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(OnOtherQuittedMatch& a, OnOtherQuittedMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(OnOtherQuittedMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnOtherQuittedMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnOtherQuittedMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnOtherQuittedMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OnOtherQuittedMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OnOtherQuittedMatch& from) {
    OnOtherQuittedMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnOtherQuittedMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OnOtherQuittedMatch";
  }
  protected:
  explicit OnOtherQuittedMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatidFieldNumber = 1,
  };
  // int32 seatid = 1;
  void clear_seatid();
  int32_t seatid() const;
  void set_seatid(int32_t value);
  private:
  int32_t _internal_seatid() const;
  void _internal_set_seatid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:OnOtherQuittedMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t seatid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class CharacterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CharacterInfo) */ {
 public:
  inline CharacterInfo() : CharacterInfo(nullptr) {}
  ~CharacterInfo() override;
  explicit PROTOBUF_CONSTEXPR CharacterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterInfo(const CharacterInfo& from);
  CharacterInfo(CharacterInfo&& from) noexcept
    : CharacterInfo() {
    *this = ::std::move(from);
  }

  inline CharacterInfo& operator=(const CharacterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterInfo& operator=(CharacterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterInfo* internal_default_instance() {
    return reinterpret_cast<const CharacterInfo*>(
               &_CharacterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CharacterInfo& a, CharacterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterInfo& from) {
    CharacterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CharacterInfo";
  }
  protected:
  explicit CharacterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamidFieldNumber = 1,
    kSeatidFieldNumber = 2,
    kCharacteridFieldNumber = 3,
  };
  // int32 teamid = 1;
  void clear_teamid();
  int32_t teamid() const;
  void set_teamid(int32_t value);
  private:
  int32_t _internal_teamid() const;
  void _internal_set_teamid(int32_t value);
  public:

  // int32 seatid = 2;
  void clear_seatid();
  int32_t seatid() const;
  void set_seatid(int32_t value);
  private:
  int32_t _internal_seatid() const;
  void _internal_set_seatid(int32_t value);
  public:

  // int32 characterid = 3;
  void clear_characterid();
  int32_t characterid() const;
  void set_characterid(int32_t value);
  private:
  int32_t _internal_characterid() const;
  void _internal_set_characterid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CharacterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t teamid_;
    int32_t seatid_;
    int32_t characterid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameStart) */ {
 public:
  inline GameStart() : GameStart(nullptr) {}
  ~GameStart() override;
  explicit PROTOBUF_CONSTEXPR GameStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameStart(const GameStart& from);
  GameStart(GameStart&& from) noexcept
    : GameStart() {
    *this = ::std::move(from);
  }

  inline GameStart& operator=(const GameStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStart& operator=(GameStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStart* internal_default_instance() {
    return reinterpret_cast<const GameStart*>(
               &_GameStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GameStart& a, GameStart& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameStart& from) {
    GameStart::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameStart";
  }
  protected:
  explicit GameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharactersFieldNumber = 1,
  };
  // repeated .CharacterInfo characters = 1;
  int characters_size() const;
  private:
  int _internal_characters_size() const;
  public:
  void clear_characters();
  ::CharacterInfo* mutable_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CharacterInfo >*
      mutable_characters();
  private:
  const ::CharacterInfo& _internal_characters(int index) const;
  ::CharacterInfo* _internal_add_characters();
  public:
  const ::CharacterInfo& characters(int index) const;
  ::CharacterInfo* add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CharacterInfo >&
      characters() const;

  // @@protoc_insertion_point(class_scope:GameStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CharacterInfo > characters_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class LogicLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicLoginReq) */ {
 public:
  inline LogicLoginReq() : LogicLoginReq(nullptr) {}
  ~LogicLoginReq() override;
  explicit PROTOBUF_CONSTEXPR LogicLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicLoginReq(const LogicLoginReq& from);
  LogicLoginReq(LogicLoginReq&& from) noexcept
    : LogicLoginReq() {
    *this = ::std::move(from);
  }

  inline LogicLoginReq& operator=(const LogicLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicLoginReq& operator=(LogicLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicLoginReq* internal_default_instance() {
    return reinterpret_cast<const LogicLoginReq*>(
               &_LogicLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(LogicLoginReq& a, LogicLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicLoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogicLoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogicLoginReq& from) {
    LogicLoginReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicLoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicLoginReq";
  }
  protected:
  explicit LogicLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUdpIpFieldNumber = 1,
    kUdpPortFieldNumber = 2,
  };
  // string udp_ip = 1;
  void clear_udp_ip();
  const std::string& udp_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_udp_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_udp_ip();
  PROTOBUF_NODISCARD std::string* release_udp_ip();
  void set_allocated_udp_ip(std::string* udp_ip);
  private:
  const std::string& _internal_udp_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_udp_ip(const std::string& value);
  std::string* _internal_mutable_udp_ip();
  public:

  // int32 udp_port = 2;
  void clear_udp_port();
  int32_t udp_port() const;
  void set_udp_port(int32_t value);
  private:
  int32_t _internal_udp_port() const;
  void _internal_set_udp_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LogicLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udp_ip_;
    int32_t udp_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class OptionEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OptionEvent) */ {
 public:
  inline OptionEvent() : OptionEvent(nullptr) {}
  ~OptionEvent() override;
  explicit PROTOBUF_CONSTEXPR OptionEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionEvent(const OptionEvent& from);
  OptionEvent(OptionEvent&& from) noexcept
    : OptionEvent() {
    *this = ::std::move(from);
  }

  inline OptionEvent& operator=(const OptionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionEvent& operator=(OptionEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionEvent* internal_default_instance() {
    return reinterpret_cast<const OptionEvent*>(
               &_OptionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(OptionEvent& a, OptionEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptionEvent& from) {
    OptionEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OptionEvent";
  }
  protected:
  explicit OptionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatidFieldNumber = 1,
    kOptTypeFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // int32 seatid = 1;
  void clear_seatid();
  int32_t seatid() const;
  void set_seatid(int32_t value);
  private:
  int32_t _internal_seatid() const;
  void _internal_set_seatid(int32_t value);
  public:

  // int32 opt_type = 2;
  void clear_opt_type();
  int32_t opt_type() const;
  void set_opt_type(int32_t value);
  private:
  int32_t _internal_opt_type() const;
  void _internal_set_opt_type(int32_t value);
  public:

  // int32 x = 3;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 4;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:OptionEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t seatid_;
    int32_t opt_type_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class FrameOpts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FrameOpts) */ {
 public:
  inline FrameOpts() : FrameOpts(nullptr) {}
  ~FrameOpts() override;
  explicit PROTOBUF_CONSTEXPR FrameOpts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameOpts(const FrameOpts& from);
  FrameOpts(FrameOpts&& from) noexcept
    : FrameOpts() {
    *this = ::std::move(from);
  }

  inline FrameOpts& operator=(const FrameOpts& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameOpts& operator=(FrameOpts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameOpts& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameOpts* internal_default_instance() {
    return reinterpret_cast<const FrameOpts*>(
               &_FrameOpts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(FrameOpts& a, FrameOpts& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameOpts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameOpts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameOpts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameOpts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameOpts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameOpts& from) {
    FrameOpts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameOpts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FrameOpts";
  }
  protected:
  explicit FrameOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptsFieldNumber = 2,
    kFrameidFieldNumber = 1,
  };
  // repeated .OptionEvent opts = 2;
  int opts_size() const;
  private:
  int _internal_opts_size() const;
  public:
  void clear_opts();
  ::OptionEvent* mutable_opts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >*
      mutable_opts();
  private:
  const ::OptionEvent& _internal_opts(int index) const;
  ::OptionEvent* _internal_add_opts();
  public:
  const ::OptionEvent& opts(int index) const;
  ::OptionEvent* add_opts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >&
      opts() const;

  // int32 frameid = 1;
  void clear_frameid();
  int32_t frameid() const;
  void set_frameid(int32_t value);
  private:
  int32_t _internal_frameid() const;
  void _internal_set_frameid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FrameOpts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent > opts_;
    int32_t frameid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class LogicFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicFrame) */ {
 public:
  inline LogicFrame() : LogicFrame(nullptr) {}
  ~LogicFrame() override;
  explicit PROTOBUF_CONSTEXPR LogicFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicFrame(const LogicFrame& from);
  LogicFrame(LogicFrame&& from) noexcept
    : LogicFrame() {
    *this = ::std::move(from);
  }

  inline LogicFrame& operator=(const LogicFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicFrame& operator=(LogicFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicFrame* internal_default_instance() {
    return reinterpret_cast<const LogicFrame*>(
               &_LogicFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(LogicFrame& a, LogicFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogicFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogicFrame& from) {
    LogicFrame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicFrame";
  }
  protected:
  explicit LogicFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnsyncFramesFieldNumber = 2,
    kFrameidFieldNumber = 1,
  };
  // repeated .FrameOpts unsync_frames = 2;
  int unsync_frames_size() const;
  private:
  int _internal_unsync_frames_size() const;
  public:
  void clear_unsync_frames();
  ::FrameOpts* mutable_unsync_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameOpts >*
      mutable_unsync_frames();
  private:
  const ::FrameOpts& _internal_unsync_frames(int index) const;
  ::FrameOpts* _internal_add_unsync_frames();
  public:
  const ::FrameOpts& unsync_frames(int index) const;
  ::FrameOpts* add_unsync_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameOpts >&
      unsync_frames() const;

  // int32 frameid = 1;
  void clear_frameid();
  int32_t frameid() const;
  void set_frameid(int32_t value);
  private:
  int32_t _internal_frameid() const;
  void _internal_set_frameid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LogicFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameOpts > unsync_frames_;
    int32_t frameid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class NextFrameOpt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NextFrameOpt) */ {
 public:
  inline NextFrameOpt() : NextFrameOpt(nullptr) {}
  ~NextFrameOpt() override;
  explicit PROTOBUF_CONSTEXPR NextFrameOpt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NextFrameOpt(const NextFrameOpt& from);
  NextFrameOpt(NextFrameOpt&& from) noexcept
    : NextFrameOpt() {
    *this = ::std::move(from);
  }

  inline NextFrameOpt& operator=(const NextFrameOpt& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextFrameOpt& operator=(NextFrameOpt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextFrameOpt& default_instance() {
    return *internal_default_instance();
  }
  static inline const NextFrameOpt* internal_default_instance() {
    return reinterpret_cast<const NextFrameOpt*>(
               &_NextFrameOpt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(NextFrameOpt& a, NextFrameOpt& b) {
    a.Swap(&b);
  }
  inline void Swap(NextFrameOpt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextFrameOpt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextFrameOpt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextFrameOpt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NextFrameOpt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NextFrameOpt& from) {
    NextFrameOpt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextFrameOpt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NextFrameOpt";
  }
  protected:
  explicit NextFrameOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptsFieldNumber = 5,
    kFrameidFieldNumber = 1,
    kZidFieldNumber = 2,
    kMatchidFieldNumber = 3,
    kSeatidFieldNumber = 4,
  };
  // repeated .OptionEvent opts = 5;
  int opts_size() const;
  private:
  int _internal_opts_size() const;
  public:
  void clear_opts();
  ::OptionEvent* mutable_opts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >*
      mutable_opts();
  private:
  const ::OptionEvent& _internal_opts(int index) const;
  ::OptionEvent* _internal_add_opts();
  public:
  const ::OptionEvent& opts(int index) const;
  ::OptionEvent* add_opts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >&
      opts() const;

  // int32 frameid = 1;
  void clear_frameid();
  int32_t frameid() const;
  void set_frameid(int32_t value);
  private:
  int32_t _internal_frameid() const;
  void _internal_set_frameid(int32_t value);
  public:

  // int32 zid = 2;
  void clear_zid();
  int32_t zid() const;
  void set_zid(int32_t value);
  private:
  int32_t _internal_zid() const;
  void _internal_set_zid(int32_t value);
  public:

  // int32 matchid = 3;
  void clear_matchid();
  int32_t matchid() const;
  void set_matchid(int32_t value);
  private:
  int32_t _internal_matchid() const;
  void _internal_set_matchid(int32_t value);
  public:

  // int32 seatid = 4;
  void clear_seatid();
  int32_t seatid() const;
  void set_seatid(int32_t value);
  private:
  int32_t _internal_seatid() const;
  void _internal_set_seatid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NextFrameOpt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent > opts_;
    int32_t frameid_;
    int32_t zid_;
    int32_t matchid_;
    int32_t seatid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameFinishedRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameFinishedRes) */ {
 public:
  inline GameFinishedRes() : GameFinishedRes(nullptr) {}
  ~GameFinishedRes() override;
  explicit PROTOBUF_CONSTEXPR GameFinishedRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameFinishedRes(const GameFinishedRes& from);
  GameFinishedRes(GameFinishedRes&& from) noexcept
    : GameFinishedRes() {
    *this = ::std::move(from);
  }

  inline GameFinishedRes& operator=(const GameFinishedRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameFinishedRes& operator=(GameFinishedRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameFinishedRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameFinishedRes* internal_default_instance() {
    return reinterpret_cast<const GameFinishedRes*>(
               &_GameFinishedRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GameFinishedRes& a, GameFinishedRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GameFinishedRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameFinishedRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameFinishedRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameFinishedRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameFinishedRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameFinishedRes& from) {
    GameFinishedRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameFinishedRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameFinishedRes";
  }
  protected:
  explicit GameFinishedRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinnerTeamidFieldNumber = 1,
  };
  // int32 winner_teamid = 1;
  void clear_winner_teamid();
  int32_t winner_teamid() const;
  void set_winner_teamid(int32_t value);
  private:
  int32_t _internal_winner_teamid() const;
  void _internal_set_winner_teamid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GameFinishedRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t winner_teamid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GuestLoginReq

// string guest_key = 1;
inline void GuestLoginReq::clear_guest_key() {
  _impl_.guest_key_.ClearToEmpty();
}
inline const std::string& GuestLoginReq::guest_key() const {
  // @@protoc_insertion_point(field_get:GuestLoginReq.guest_key)
  return _internal_guest_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuestLoginReq::set_guest_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.guest_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GuestLoginReq.guest_key)
}
inline std::string* GuestLoginReq::mutable_guest_key() {
  std::string* _s = _internal_mutable_guest_key();
  // @@protoc_insertion_point(field_mutable:GuestLoginReq.guest_key)
  return _s;
}
inline const std::string& GuestLoginReq::_internal_guest_key() const {
  return _impl_.guest_key_.Get();
}
inline void GuestLoginReq::_internal_set_guest_key(const std::string& value) {
  
  _impl_.guest_key_.Set(value, GetArenaForAllocation());
}
inline std::string* GuestLoginReq::_internal_mutable_guest_key() {
  
  return _impl_.guest_key_.Mutable(GetArenaForAllocation());
}
inline std::string* GuestLoginReq::release_guest_key() {
  // @@protoc_insertion_point(field_release:GuestLoginReq.guest_key)
  return _impl_.guest_key_.Release();
}
inline void GuestLoginReq::set_allocated_guest_key(std::string* guest_key) {
  if (guest_key != nullptr) {
    
  } else {
    
  }
  _impl_.guest_key_.SetAllocated(guest_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guest_key_.IsDefault()) {
    _impl_.guest_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GuestLoginReq.guest_key)
}

// -------------------------------------------------------------------

// UserLoginReq

// string uname = 1;
inline void UserLoginReq::clear_uname() {
  _impl_.uname_.ClearToEmpty();
}
inline const std::string& UserLoginReq::uname() const {
  // @@protoc_insertion_point(field_get:UserLoginReq.uname)
  return _internal_uname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginReq::set_uname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserLoginReq.uname)
}
inline std::string* UserLoginReq::mutable_uname() {
  std::string* _s = _internal_mutable_uname();
  // @@protoc_insertion_point(field_mutable:UserLoginReq.uname)
  return _s;
}
inline const std::string& UserLoginReq::_internal_uname() const {
  return _impl_.uname_.Get();
}
inline void UserLoginReq::_internal_set_uname(const std::string& value) {
  
  _impl_.uname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginReq::_internal_mutable_uname() {
  
  return _impl_.uname_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginReq::release_uname() {
  // @@protoc_insertion_point(field_release:UserLoginReq.uname)
  return _impl_.uname_.Release();
}
inline void UserLoginReq::set_allocated_uname(std::string* uname) {
  if (uname != nullptr) {
    
  } else {
    
  }
  _impl_.uname_.SetAllocated(uname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uname_.IsDefault()) {
    _impl_.uname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserLoginReq.uname)
}

// string upwd_md5 = 2;
inline void UserLoginReq::clear_upwd_md5() {
  _impl_.upwd_md5_.ClearToEmpty();
}
inline const std::string& UserLoginReq::upwd_md5() const {
  // @@protoc_insertion_point(field_get:UserLoginReq.upwd_md5)
  return _internal_upwd_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginReq::set_upwd_md5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.upwd_md5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserLoginReq.upwd_md5)
}
inline std::string* UserLoginReq::mutable_upwd_md5() {
  std::string* _s = _internal_mutable_upwd_md5();
  // @@protoc_insertion_point(field_mutable:UserLoginReq.upwd_md5)
  return _s;
}
inline const std::string& UserLoginReq::_internal_upwd_md5() const {
  return _impl_.upwd_md5_.Get();
}
inline void UserLoginReq::_internal_set_upwd_md5(const std::string& value) {
  
  _impl_.upwd_md5_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginReq::_internal_mutable_upwd_md5() {
  
  return _impl_.upwd_md5_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginReq::release_upwd_md5() {
  // @@protoc_insertion_point(field_release:UserLoginReq.upwd_md5)
  return _impl_.upwd_md5_.Release();
}
inline void UserLoginReq::set_allocated_upwd_md5(std::string* upwd_md5) {
  if (upwd_md5 != nullptr) {
    
  } else {
    
  }
  _impl_.upwd_md5_.SetAllocated(upwd_md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.upwd_md5_.IsDefault()) {
    _impl_.upwd_md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserLoginReq.upwd_md5)
}

// -------------------------------------------------------------------

// UserCenterInfo

// string unick = 1;
inline void UserCenterInfo::clear_unick() {
  _impl_.unick_.ClearToEmpty();
}
inline const std::string& UserCenterInfo::unick() const {
  // @@protoc_insertion_point(field_get:UserCenterInfo.unick)
  return _internal_unick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserCenterInfo::set_unick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserCenterInfo.unick)
}
inline std::string* UserCenterInfo::mutable_unick() {
  std::string* _s = _internal_mutable_unick();
  // @@protoc_insertion_point(field_mutable:UserCenterInfo.unick)
  return _s;
}
inline const std::string& UserCenterInfo::_internal_unick() const {
  return _impl_.unick_.Get();
}
inline void UserCenterInfo::_internal_set_unick(const std::string& value) {
  
  _impl_.unick_.Set(value, GetArenaForAllocation());
}
inline std::string* UserCenterInfo::_internal_mutable_unick() {
  
  return _impl_.unick_.Mutable(GetArenaForAllocation());
}
inline std::string* UserCenterInfo::release_unick() {
  // @@protoc_insertion_point(field_release:UserCenterInfo.unick)
  return _impl_.unick_.Release();
}
inline void UserCenterInfo::set_allocated_unick(std::string* unick) {
  if (unick != nullptr) {
    
  } else {
    
  }
  _impl_.unick_.SetAllocated(unick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unick_.IsDefault()) {
    _impl_.unick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserCenterInfo.unick)
}

// int32 usex = 2;
inline void UserCenterInfo::clear_usex() {
  _impl_.usex_ = 0;
}
inline int32_t UserCenterInfo::_internal_usex() const {
  return _impl_.usex_;
}
inline int32_t UserCenterInfo::usex() const {
  // @@protoc_insertion_point(field_get:UserCenterInfo.usex)
  return _internal_usex();
}
inline void UserCenterInfo::_internal_set_usex(int32_t value) {
  
  _impl_.usex_ = value;
}
inline void UserCenterInfo::set_usex(int32_t value) {
  _internal_set_usex(value);
  // @@protoc_insertion_point(field_set:UserCenterInfo.usex)
}

// int32 usysavatar = 3;
inline void UserCenterInfo::clear_usysavatar() {
  _impl_.usysavatar_ = 0;
}
inline int32_t UserCenterInfo::_internal_usysavatar() const {
  return _impl_.usysavatar_;
}
inline int32_t UserCenterInfo::usysavatar() const {
  // @@protoc_insertion_point(field_get:UserCenterInfo.usysavatar)
  return _internal_usysavatar();
}
inline void UserCenterInfo::_internal_set_usysavatar(int32_t value) {
  
  _impl_.usysavatar_ = value;
}
inline void UserCenterInfo::set_usysavatar(int32_t value) {
  _internal_set_usysavatar(value);
  // @@protoc_insertion_point(field_set:UserCenterInfo.usysavatar)
}

// int32 uvip = 4;
inline void UserCenterInfo::clear_uvip() {
  _impl_.uvip_ = 0;
}
inline int32_t UserCenterInfo::_internal_uvip() const {
  return _impl_.uvip_;
}
inline int32_t UserCenterInfo::uvip() const {
  // @@protoc_insertion_point(field_get:UserCenterInfo.uvip)
  return _internal_uvip();
}
inline void UserCenterInfo::_internal_set_uvip(int32_t value) {
  
  _impl_.uvip_ = value;
}
inline void UserCenterInfo::set_uvip(int32_t value) {
  _internal_set_uvip(value);
  // @@protoc_insertion_point(field_set:UserCenterInfo.uvip)
}

// int32 uid = 5;
inline void UserCenterInfo::clear_uid() {
  _impl_.uid_ = 0;
}
inline int32_t UserCenterInfo::_internal_uid() const {
  return _impl_.uid_;
}
inline int32_t UserCenterInfo::uid() const {
  // @@protoc_insertion_point(field_get:UserCenterInfo.uid)
  return _internal_uid();
}
inline void UserCenterInfo::_internal_set_uid(int32_t value) {
  
  _impl_.uid_ = value;
}
inline void UserCenterInfo::set_uid(int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:UserCenterInfo.uid)
}

// -------------------------------------------------------------------

// GuestLoginRes

// int32 status = 1;
inline void GuestLoginRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t GuestLoginRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t GuestLoginRes::status() const {
  // @@protoc_insertion_point(field_get:GuestLoginRes.status)
  return _internal_status();
}
inline void GuestLoginRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void GuestLoginRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GuestLoginRes.status)
}

// optional .UserCenterInfo uinfo = 2;
inline bool GuestLoginRes::_internal_has_uinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uinfo_ != nullptr);
  return value;
}
inline bool GuestLoginRes::has_uinfo() const {
  return _internal_has_uinfo();
}
inline void GuestLoginRes::clear_uinfo() {
  if (_impl_.uinfo_ != nullptr) _impl_.uinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::UserCenterInfo& GuestLoginRes::_internal_uinfo() const {
  const ::UserCenterInfo* p = _impl_.uinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserCenterInfo&>(
      ::_UserCenterInfo_default_instance_);
}
inline const ::UserCenterInfo& GuestLoginRes::uinfo() const {
  // @@protoc_insertion_point(field_get:GuestLoginRes.uinfo)
  return _internal_uinfo();
}
inline void GuestLoginRes::unsafe_arena_set_allocated_uinfo(
    ::UserCenterInfo* uinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uinfo_);
  }
  _impl_.uinfo_ = uinfo;
  if (uinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GuestLoginRes.uinfo)
}
inline ::UserCenterInfo* GuestLoginRes::release_uinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::UserCenterInfo* temp = _impl_.uinfo_;
  _impl_.uinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserCenterInfo* GuestLoginRes::unsafe_arena_release_uinfo() {
  // @@protoc_insertion_point(field_release:GuestLoginRes.uinfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::UserCenterInfo* temp = _impl_.uinfo_;
  _impl_.uinfo_ = nullptr;
  return temp;
}
inline ::UserCenterInfo* GuestLoginRes::_internal_mutable_uinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.uinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserCenterInfo>(GetArenaForAllocation());
    _impl_.uinfo_ = p;
  }
  return _impl_.uinfo_;
}
inline ::UserCenterInfo* GuestLoginRes::mutable_uinfo() {
  ::UserCenterInfo* _msg = _internal_mutable_uinfo();
  // @@protoc_insertion_point(field_mutable:GuestLoginRes.uinfo)
  return _msg;
}
inline void GuestLoginRes::set_allocated_uinfo(::UserCenterInfo* uinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.uinfo_;
  }
  if (uinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uinfo);
    if (message_arena != submessage_arena) {
      uinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uinfo_ = uinfo;
  // @@protoc_insertion_point(field_set_allocated:GuestLoginRes.uinfo)
}

// -------------------------------------------------------------------

// UserLoginRes

// int32 status = 1;
inline void UserLoginRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t UserLoginRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t UserLoginRes::status() const {
  // @@protoc_insertion_point(field_get:UserLoginRes.status)
  return _internal_status();
}
inline void UserLoginRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void UserLoginRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UserLoginRes.status)
}

// optional .UserCenterInfo uinfo = 2;
inline bool UserLoginRes::_internal_has_uinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uinfo_ != nullptr);
  return value;
}
inline bool UserLoginRes::has_uinfo() const {
  return _internal_has_uinfo();
}
inline void UserLoginRes::clear_uinfo() {
  if (_impl_.uinfo_ != nullptr) _impl_.uinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::UserCenterInfo& UserLoginRes::_internal_uinfo() const {
  const ::UserCenterInfo* p = _impl_.uinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserCenterInfo&>(
      ::_UserCenterInfo_default_instance_);
}
inline const ::UserCenterInfo& UserLoginRes::uinfo() const {
  // @@protoc_insertion_point(field_get:UserLoginRes.uinfo)
  return _internal_uinfo();
}
inline void UserLoginRes::unsafe_arena_set_allocated_uinfo(
    ::UserCenterInfo* uinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uinfo_);
  }
  _impl_.uinfo_ = uinfo;
  if (uinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserLoginRes.uinfo)
}
inline ::UserCenterInfo* UserLoginRes::release_uinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::UserCenterInfo* temp = _impl_.uinfo_;
  _impl_.uinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserCenterInfo* UserLoginRes::unsafe_arena_release_uinfo() {
  // @@protoc_insertion_point(field_release:UserLoginRes.uinfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::UserCenterInfo* temp = _impl_.uinfo_;
  _impl_.uinfo_ = nullptr;
  return temp;
}
inline ::UserCenterInfo* UserLoginRes::_internal_mutable_uinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.uinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserCenterInfo>(GetArenaForAllocation());
    _impl_.uinfo_ = p;
  }
  return _impl_.uinfo_;
}
inline ::UserCenterInfo* UserLoginRes::mutable_uinfo() {
  ::UserCenterInfo* _msg = _internal_mutable_uinfo();
  // @@protoc_insertion_point(field_mutable:UserLoginRes.uinfo)
  return _msg;
}
inline void UserLoginRes::set_allocated_uinfo(::UserCenterInfo* uinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.uinfo_;
  }
  if (uinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uinfo);
    if (message_arena != submessage_arena) {
      uinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uinfo_ = uinfo;
  // @@protoc_insertion_point(field_set_allocated:UserLoginRes.uinfo)
}

// -------------------------------------------------------------------

// EditProfileReq

// string unick = 1;
inline void EditProfileReq::clear_unick() {
  _impl_.unick_.ClearToEmpty();
}
inline const std::string& EditProfileReq::unick() const {
  // @@protoc_insertion_point(field_get:EditProfileReq.unick)
  return _internal_unick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EditProfileReq::set_unick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EditProfileReq.unick)
}
inline std::string* EditProfileReq::mutable_unick() {
  std::string* _s = _internal_mutable_unick();
  // @@protoc_insertion_point(field_mutable:EditProfileReq.unick)
  return _s;
}
inline const std::string& EditProfileReq::_internal_unick() const {
  return _impl_.unick_.Get();
}
inline void EditProfileReq::_internal_set_unick(const std::string& value) {
  
  _impl_.unick_.Set(value, GetArenaForAllocation());
}
inline std::string* EditProfileReq::_internal_mutable_unick() {
  
  return _impl_.unick_.Mutable(GetArenaForAllocation());
}
inline std::string* EditProfileReq::release_unick() {
  // @@protoc_insertion_point(field_release:EditProfileReq.unick)
  return _impl_.unick_.Release();
}
inline void EditProfileReq::set_allocated_unick(std::string* unick) {
  if (unick != nullptr) {
    
  } else {
    
  }
  _impl_.unick_.SetAllocated(unick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unick_.IsDefault()) {
    _impl_.unick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EditProfileReq.unick)
}

// int32 usex = 2;
inline void EditProfileReq::clear_usex() {
  _impl_.usex_ = 0;
}
inline int32_t EditProfileReq::_internal_usex() const {
  return _impl_.usex_;
}
inline int32_t EditProfileReq::usex() const {
  // @@protoc_insertion_point(field_get:EditProfileReq.usex)
  return _internal_usex();
}
inline void EditProfileReq::_internal_set_usex(int32_t value) {
  
  _impl_.usex_ = value;
}
inline void EditProfileReq::set_usex(int32_t value) {
  _internal_set_usex(value);
  // @@protoc_insertion_point(field_set:EditProfileReq.usex)
}

// int32 usysavatar = 3;
inline void EditProfileReq::clear_usysavatar() {
  _impl_.usysavatar_ = 0;
}
inline int32_t EditProfileReq::_internal_usysavatar() const {
  return _impl_.usysavatar_;
}
inline int32_t EditProfileReq::usysavatar() const {
  // @@protoc_insertion_point(field_get:EditProfileReq.usysavatar)
  return _internal_usysavatar();
}
inline void EditProfileReq::_internal_set_usysavatar(int32_t value) {
  
  _impl_.usysavatar_ = value;
}
inline void EditProfileReq::set_usysavatar(int32_t value) {
  _internal_set_usysavatar(value);
  // @@protoc_insertion_point(field_set:EditProfileReq.usysavatar)
}

// -------------------------------------------------------------------

// EditProfileRes

// int32 status = 1;
inline void EditProfileRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t EditProfileRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t EditProfileRes::status() const {
  // @@protoc_insertion_point(field_get:EditProfileRes.status)
  return _internal_status();
}
inline void EditProfileRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void EditProfileRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EditProfileRes.status)
}

// -------------------------------------------------------------------

// GuestUpgradeReq

// string uname = 1;
inline void GuestUpgradeReq::clear_uname() {
  _impl_.uname_.ClearToEmpty();
}
inline const std::string& GuestUpgradeReq::uname() const {
  // @@protoc_insertion_point(field_get:GuestUpgradeReq.uname)
  return _internal_uname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuestUpgradeReq::set_uname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GuestUpgradeReq.uname)
}
inline std::string* GuestUpgradeReq::mutable_uname() {
  std::string* _s = _internal_mutable_uname();
  // @@protoc_insertion_point(field_mutable:GuestUpgradeReq.uname)
  return _s;
}
inline const std::string& GuestUpgradeReq::_internal_uname() const {
  return _impl_.uname_.Get();
}
inline void GuestUpgradeReq::_internal_set_uname(const std::string& value) {
  
  _impl_.uname_.Set(value, GetArenaForAllocation());
}
inline std::string* GuestUpgradeReq::_internal_mutable_uname() {
  
  return _impl_.uname_.Mutable(GetArenaForAllocation());
}
inline std::string* GuestUpgradeReq::release_uname() {
  // @@protoc_insertion_point(field_release:GuestUpgradeReq.uname)
  return _impl_.uname_.Release();
}
inline void GuestUpgradeReq::set_allocated_uname(std::string* uname) {
  if (uname != nullptr) {
    
  } else {
    
  }
  _impl_.uname_.SetAllocated(uname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uname_.IsDefault()) {
    _impl_.uname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GuestUpgradeReq.uname)
}

// string upwd_md5 = 2;
inline void GuestUpgradeReq::clear_upwd_md5() {
  _impl_.upwd_md5_.ClearToEmpty();
}
inline const std::string& GuestUpgradeReq::upwd_md5() const {
  // @@protoc_insertion_point(field_get:GuestUpgradeReq.upwd_md5)
  return _internal_upwd_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuestUpgradeReq::set_upwd_md5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.upwd_md5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GuestUpgradeReq.upwd_md5)
}
inline std::string* GuestUpgradeReq::mutable_upwd_md5() {
  std::string* _s = _internal_mutable_upwd_md5();
  // @@protoc_insertion_point(field_mutable:GuestUpgradeReq.upwd_md5)
  return _s;
}
inline const std::string& GuestUpgradeReq::_internal_upwd_md5() const {
  return _impl_.upwd_md5_.Get();
}
inline void GuestUpgradeReq::_internal_set_upwd_md5(const std::string& value) {
  
  _impl_.upwd_md5_.Set(value, GetArenaForAllocation());
}
inline std::string* GuestUpgradeReq::_internal_mutable_upwd_md5() {
  
  return _impl_.upwd_md5_.Mutable(GetArenaForAllocation());
}
inline std::string* GuestUpgradeReq::release_upwd_md5() {
  // @@protoc_insertion_point(field_release:GuestUpgradeReq.upwd_md5)
  return _impl_.upwd_md5_.Release();
}
inline void GuestUpgradeReq::set_allocated_upwd_md5(std::string* upwd_md5) {
  if (upwd_md5 != nullptr) {
    
  } else {
    
  }
  _impl_.upwd_md5_.SetAllocated(upwd_md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.upwd_md5_.IsDefault()) {
    _impl_.upwd_md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GuestUpgradeReq.upwd_md5)
}

// -------------------------------------------------------------------

// GuestUpgradeRes

// int32 status = 1;
inline void GuestUpgradeRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t GuestUpgradeRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t GuestUpgradeRes::status() const {
  // @@protoc_insertion_point(field_get:GuestUpgradeRes.status)
  return _internal_status();
}
inline void GuestUpgradeRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void GuestUpgradeRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GuestUpgradeRes.status)
}

// -------------------------------------------------------------------

// LogoutRes

// int32 status = 1;
inline void LogoutRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t LogoutRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t LogoutRes::status() const {
  // @@protoc_insertion_point(field_get:LogoutRes.status)
  return _internal_status();
}
inline void LogoutRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void LogoutRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:LogoutRes.status)
}

// -------------------------------------------------------------------

// GetUGameInfo

// int32 uchip = 1;
inline void GetUGameInfo::clear_uchip() {
  _impl_.uchip_ = 0;
}
inline int32_t GetUGameInfo::_internal_uchip() const {
  return _impl_.uchip_;
}
inline int32_t GetUGameInfo::uchip() const {
  // @@protoc_insertion_point(field_get:GetUGameInfo.uchip)
  return _internal_uchip();
}
inline void GetUGameInfo::_internal_set_uchip(int32_t value) {
  
  _impl_.uchip_ = value;
}
inline void GetUGameInfo::set_uchip(int32_t value) {
  _internal_set_uchip(value);
  // @@protoc_insertion_point(field_set:GetUGameInfo.uchip)
}

// int32 uexp = 2;
inline void GetUGameInfo::clear_uexp() {
  _impl_.uexp_ = 0;
}
inline int32_t GetUGameInfo::_internal_uexp() const {
  return _impl_.uexp_;
}
inline int32_t GetUGameInfo::uexp() const {
  // @@protoc_insertion_point(field_get:GetUGameInfo.uexp)
  return _internal_uexp();
}
inline void GetUGameInfo::_internal_set_uexp(int32_t value) {
  
  _impl_.uexp_ = value;
}
inline void GetUGameInfo::set_uexp(int32_t value) {
  _internal_set_uexp(value);
  // @@protoc_insertion_point(field_set:GetUGameInfo.uexp)
}

// int32 uvip = 3;
inline void GetUGameInfo::clear_uvip() {
  _impl_.uvip_ = 0;
}
inline int32_t GetUGameInfo::_internal_uvip() const {
  return _impl_.uvip_;
}
inline int32_t GetUGameInfo::uvip() const {
  // @@protoc_insertion_point(field_get:GetUGameInfo.uvip)
  return _internal_uvip();
}
inline void GetUGameInfo::_internal_set_uvip(int32_t value) {
  
  _impl_.uvip_ = value;
}
inline void GetUGameInfo::set_uvip(int32_t value) {
  _internal_set_uvip(value);
  // @@protoc_insertion_point(field_set:GetUGameInfo.uvip)
}

// int32 uchip2 = 4;
inline void GetUGameInfo::clear_uchip2() {
  _impl_.uchip2_ = 0;
}
inline int32_t GetUGameInfo::_internal_uchip2() const {
  return _impl_.uchip2_;
}
inline int32_t GetUGameInfo::uchip2() const {
  // @@protoc_insertion_point(field_get:GetUGameInfo.uchip2)
  return _internal_uchip2();
}
inline void GetUGameInfo::_internal_set_uchip2(int32_t value) {
  
  _impl_.uchip2_ = value;
}
inline void GetUGameInfo::set_uchip2(int32_t value) {
  _internal_set_uchip2(value);
  // @@protoc_insertion_point(field_set:GetUGameInfo.uchip2)
}

// int32 uchip3 = 5;
inline void GetUGameInfo::clear_uchip3() {
  _impl_.uchip3_ = 0;
}
inline int32_t GetUGameInfo::_internal_uchip3() const {
  return _impl_.uchip3_;
}
inline int32_t GetUGameInfo::uchip3() const {
  // @@protoc_insertion_point(field_get:GetUGameInfo.uchip3)
  return _internal_uchip3();
}
inline void GetUGameInfo::_internal_set_uchip3(int32_t value) {
  
  _impl_.uchip3_ = value;
}
inline void GetUGameInfo::set_uchip3(int32_t value) {
  _internal_set_uchip3(value);
  // @@protoc_insertion_point(field_set:GetUGameInfo.uchip3)
}

// int32 udata1 = 6;
inline void GetUGameInfo::clear_udata1() {
  _impl_.udata1_ = 0;
}
inline int32_t GetUGameInfo::_internal_udata1() const {
  return _impl_.udata1_;
}
inline int32_t GetUGameInfo::udata1() const {
  // @@protoc_insertion_point(field_get:GetUGameInfo.udata1)
  return _internal_udata1();
}
inline void GetUGameInfo::_internal_set_udata1(int32_t value) {
  
  _impl_.udata1_ = value;
}
inline void GetUGameInfo::set_udata1(int32_t value) {
  _internal_set_udata1(value);
  // @@protoc_insertion_point(field_set:GetUGameInfo.udata1)
}

// int32 udata2 = 7;
inline void GetUGameInfo::clear_udata2() {
  _impl_.udata2_ = 0;
}
inline int32_t GetUGameInfo::_internal_udata2() const {
  return _impl_.udata2_;
}
inline int32_t GetUGameInfo::udata2() const {
  // @@protoc_insertion_point(field_get:GetUGameInfo.udata2)
  return _internal_udata2();
}
inline void GetUGameInfo::_internal_set_udata2(int32_t value) {
  
  _impl_.udata2_ = value;
}
inline void GetUGameInfo::set_udata2(int32_t value) {
  _internal_set_udata2(value);
  // @@protoc_insertion_point(field_set:GetUGameInfo.udata2)
}

// int32 udata3 = 8;
inline void GetUGameInfo::clear_udata3() {
  _impl_.udata3_ = 0;
}
inline int32_t GetUGameInfo::_internal_udata3() const {
  return _impl_.udata3_;
}
inline int32_t GetUGameInfo::udata3() const {
  // @@protoc_insertion_point(field_get:GetUGameInfo.udata3)
  return _internal_udata3();
}
inline void GetUGameInfo::_internal_set_udata3(int32_t value) {
  
  _impl_.udata3_ = value;
}
inline void GetUGameInfo::set_udata3(int32_t value) {
  _internal_set_udata3(value);
  // @@protoc_insertion_point(field_set:GetUGameInfo.udata3)
}

// -------------------------------------------------------------------

// GetUGameInfoRes

// int32 status = 1;
inline void GetUGameInfoRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t GetUGameInfoRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t GetUGameInfoRes::status() const {
  // @@protoc_insertion_point(field_get:GetUGameInfoRes.status)
  return _internal_status();
}
inline void GetUGameInfoRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void GetUGameInfoRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GetUGameInfoRes.status)
}

// optional .GetUGameInfo uinfo = 2;
inline bool GetUGameInfoRes::_internal_has_uinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uinfo_ != nullptr);
  return value;
}
inline bool GetUGameInfoRes::has_uinfo() const {
  return _internal_has_uinfo();
}
inline void GetUGameInfoRes::clear_uinfo() {
  if (_impl_.uinfo_ != nullptr) _impl_.uinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::GetUGameInfo& GetUGameInfoRes::_internal_uinfo() const {
  const ::GetUGameInfo* p = _impl_.uinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::GetUGameInfo&>(
      ::_GetUGameInfo_default_instance_);
}
inline const ::GetUGameInfo& GetUGameInfoRes::uinfo() const {
  // @@protoc_insertion_point(field_get:GetUGameInfoRes.uinfo)
  return _internal_uinfo();
}
inline void GetUGameInfoRes::unsafe_arena_set_allocated_uinfo(
    ::GetUGameInfo* uinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uinfo_);
  }
  _impl_.uinfo_ = uinfo;
  if (uinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetUGameInfoRes.uinfo)
}
inline ::GetUGameInfo* GetUGameInfoRes::release_uinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GetUGameInfo* temp = _impl_.uinfo_;
  _impl_.uinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GetUGameInfo* GetUGameInfoRes::unsafe_arena_release_uinfo() {
  // @@protoc_insertion_point(field_release:GetUGameInfoRes.uinfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GetUGameInfo* temp = _impl_.uinfo_;
  _impl_.uinfo_ = nullptr;
  return temp;
}
inline ::GetUGameInfo* GetUGameInfoRes::_internal_mutable_uinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.uinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::GetUGameInfo>(GetArenaForAllocation());
    _impl_.uinfo_ = p;
  }
  return _impl_.uinfo_;
}
inline ::GetUGameInfo* GetUGameInfoRes::mutable_uinfo() {
  ::GetUGameInfo* _msg = _internal_mutable_uinfo();
  // @@protoc_insertion_point(field_mutable:GetUGameInfoRes.uinfo)
  return _msg;
}
inline void GetUGameInfoRes::set_allocated_uinfo(::GetUGameInfo* uinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.uinfo_;
  }
  if (uinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uinfo);
    if (message_arena != submessage_arena) {
      uinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uinfo_ = uinfo;
  // @@protoc_insertion_point(field_set_allocated:GetUGameInfoRes.uinfo)
}

// -------------------------------------------------------------------

// RecvLoginBonusRes

// int32 status = 1;
inline void RecvLoginBonusRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t RecvLoginBonusRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t RecvLoginBonusRes::status() const {
  // @@protoc_insertion_point(field_get:RecvLoginBonusRes.status)
  return _internal_status();
}
inline void RecvLoginBonusRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void RecvLoginBonusRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:RecvLoginBonusRes.status)
}

// -------------------------------------------------------------------

// WorldRankUchip

// string unick = 1;
inline void WorldRankUchip::clear_unick() {
  _impl_.unick_.ClearToEmpty();
}
inline const std::string& WorldRankUchip::unick() const {
  // @@protoc_insertion_point(field_get:WorldRankUchip.unick)
  return _internal_unick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorldRankUchip::set_unick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WorldRankUchip.unick)
}
inline std::string* WorldRankUchip::mutable_unick() {
  std::string* _s = _internal_mutable_unick();
  // @@protoc_insertion_point(field_mutable:WorldRankUchip.unick)
  return _s;
}
inline const std::string& WorldRankUchip::_internal_unick() const {
  return _impl_.unick_.Get();
}
inline void WorldRankUchip::_internal_set_unick(const std::string& value) {
  
  _impl_.unick_.Set(value, GetArenaForAllocation());
}
inline std::string* WorldRankUchip::_internal_mutable_unick() {
  
  return _impl_.unick_.Mutable(GetArenaForAllocation());
}
inline std::string* WorldRankUchip::release_unick() {
  // @@protoc_insertion_point(field_release:WorldRankUchip.unick)
  return _impl_.unick_.Release();
}
inline void WorldRankUchip::set_allocated_unick(std::string* unick) {
  if (unick != nullptr) {
    
  } else {
    
  }
  _impl_.unick_.SetAllocated(unick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unick_.IsDefault()) {
    _impl_.unick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WorldRankUchip.unick)
}

// int32 usex = 2;
inline void WorldRankUchip::clear_usex() {
  _impl_.usex_ = 0;
}
inline int32_t WorldRankUchip::_internal_usex() const {
  return _impl_.usex_;
}
inline int32_t WorldRankUchip::usex() const {
  // @@protoc_insertion_point(field_get:WorldRankUchip.usex)
  return _internal_usex();
}
inline void WorldRankUchip::_internal_set_usex(int32_t value) {
  
  _impl_.usex_ = value;
}
inline void WorldRankUchip::set_usex(int32_t value) {
  _internal_set_usex(value);
  // @@protoc_insertion_point(field_set:WorldRankUchip.usex)
}

// int32 usysavatar = 3;
inline void WorldRankUchip::clear_usysavatar() {
  _impl_.usysavatar_ = 0;
}
inline int32_t WorldRankUchip::_internal_usysavatar() const {
  return _impl_.usysavatar_;
}
inline int32_t WorldRankUchip::usysavatar() const {
  // @@protoc_insertion_point(field_get:WorldRankUchip.usysavatar)
  return _internal_usysavatar();
}
inline void WorldRankUchip::_internal_set_usysavatar(int32_t value) {
  
  _impl_.usysavatar_ = value;
}
inline void WorldRankUchip::set_usysavatar(int32_t value) {
  _internal_set_usysavatar(value);
  // @@protoc_insertion_point(field_set:WorldRankUchip.usysavatar)
}

// int32 uvip = 4;
inline void WorldRankUchip::clear_uvip() {
  _impl_.uvip_ = 0;
}
inline int32_t WorldRankUchip::_internal_uvip() const {
  return _impl_.uvip_;
}
inline int32_t WorldRankUchip::uvip() const {
  // @@protoc_insertion_point(field_get:WorldRankUchip.uvip)
  return _internal_uvip();
}
inline void WorldRankUchip::_internal_set_uvip(int32_t value) {
  
  _impl_.uvip_ = value;
}
inline void WorldRankUchip::set_uvip(int32_t value) {
  _internal_set_uvip(value);
  // @@protoc_insertion_point(field_set:WorldRankUchip.uvip)
}

// int32 uchip = 5;
inline void WorldRankUchip::clear_uchip() {
  _impl_.uchip_ = 0;
}
inline int32_t WorldRankUchip::_internal_uchip() const {
  return _impl_.uchip_;
}
inline int32_t WorldRankUchip::uchip() const {
  // @@protoc_insertion_point(field_get:WorldRankUchip.uchip)
  return _internal_uchip();
}
inline void WorldRankUchip::_internal_set_uchip(int32_t value) {
  
  _impl_.uchip_ = value;
}
inline void WorldRankUchip::set_uchip(int32_t value) {
  _internal_set_uchip(value);
  // @@protoc_insertion_point(field_set:WorldRankUchip.uchip)
}

// -------------------------------------------------------------------

// GetWorldRankUchipRes

// int32 status = 1;
inline void GetWorldRankUchipRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t GetWorldRankUchipRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t GetWorldRankUchipRes::status() const {
  // @@protoc_insertion_point(field_get:GetWorldRankUchipRes.status)
  return _internal_status();
}
inline void GetWorldRankUchipRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void GetWorldRankUchipRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GetWorldRankUchipRes.status)
}

// repeated .WorldRankUchip rank_info = 2;
inline int GetWorldRankUchipRes::_internal_rank_info_size() const {
  return _impl_.rank_info_.size();
}
inline int GetWorldRankUchipRes::rank_info_size() const {
  return _internal_rank_info_size();
}
inline void GetWorldRankUchipRes::clear_rank_info() {
  _impl_.rank_info_.Clear();
}
inline ::WorldRankUchip* GetWorldRankUchipRes::mutable_rank_info(int index) {
  // @@protoc_insertion_point(field_mutable:GetWorldRankUchipRes.rank_info)
  return _impl_.rank_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorldRankUchip >*
GetWorldRankUchipRes::mutable_rank_info() {
  // @@protoc_insertion_point(field_mutable_list:GetWorldRankUchipRes.rank_info)
  return &_impl_.rank_info_;
}
inline const ::WorldRankUchip& GetWorldRankUchipRes::_internal_rank_info(int index) const {
  return _impl_.rank_info_.Get(index);
}
inline const ::WorldRankUchip& GetWorldRankUchipRes::rank_info(int index) const {
  // @@protoc_insertion_point(field_get:GetWorldRankUchipRes.rank_info)
  return _internal_rank_info(index);
}
inline ::WorldRankUchip* GetWorldRankUchipRes::_internal_add_rank_info() {
  return _impl_.rank_info_.Add();
}
inline ::WorldRankUchip* GetWorldRankUchipRes::add_rank_info() {
  ::WorldRankUchip* _add = _internal_add_rank_info();
  // @@protoc_insertion_point(field_add:GetWorldRankUchipRes.rank_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorldRankUchip >&
GetWorldRankUchipRes::rank_info() const {
  // @@protoc_insertion_point(field_list:GetWorldRankUchipRes.rank_info)
  return _impl_.rank_info_;
}

// -------------------------------------------------------------------

// GetSysMsgReq

// int32 ver_num = 1;
inline void GetSysMsgReq::clear_ver_num() {
  _impl_.ver_num_ = 0;
}
inline int32_t GetSysMsgReq::_internal_ver_num() const {
  return _impl_.ver_num_;
}
inline int32_t GetSysMsgReq::ver_num() const {
  // @@protoc_insertion_point(field_get:GetSysMsgReq.ver_num)
  return _internal_ver_num();
}
inline void GetSysMsgReq::_internal_set_ver_num(int32_t value) {
  
  _impl_.ver_num_ = value;
}
inline void GetSysMsgReq::set_ver_num(int32_t value) {
  _internal_set_ver_num(value);
  // @@protoc_insertion_point(field_set:GetSysMsgReq.ver_num)
}

// -------------------------------------------------------------------

// GetSysMsgRes

// int32 status = 1;
inline void GetSysMsgRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t GetSysMsgRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t GetSysMsgRes::status() const {
  // @@protoc_insertion_point(field_get:GetSysMsgRes.status)
  return _internal_status();
}
inline void GetSysMsgRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void GetSysMsgRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GetSysMsgRes.status)
}

// int32 ver_num = 2;
inline void GetSysMsgRes::clear_ver_num() {
  _impl_.ver_num_ = 0;
}
inline int32_t GetSysMsgRes::_internal_ver_num() const {
  return _impl_.ver_num_;
}
inline int32_t GetSysMsgRes::ver_num() const {
  // @@protoc_insertion_point(field_get:GetSysMsgRes.ver_num)
  return _internal_ver_num();
}
inline void GetSysMsgRes::_internal_set_ver_num(int32_t value) {
  
  _impl_.ver_num_ = value;
}
inline void GetSysMsgRes::set_ver_num(int32_t value) {
  _internal_set_ver_num(value);
  // @@protoc_insertion_point(field_set:GetSysMsgRes.ver_num)
}

// repeated string sys_msgs = 3;
inline int GetSysMsgRes::_internal_sys_msgs_size() const {
  return _impl_.sys_msgs_.size();
}
inline int GetSysMsgRes::sys_msgs_size() const {
  return _internal_sys_msgs_size();
}
inline void GetSysMsgRes::clear_sys_msgs() {
  _impl_.sys_msgs_.Clear();
}
inline std::string* GetSysMsgRes::add_sys_msgs() {
  std::string* _s = _internal_add_sys_msgs();
  // @@protoc_insertion_point(field_add_mutable:GetSysMsgRes.sys_msgs)
  return _s;
}
inline const std::string& GetSysMsgRes::_internal_sys_msgs(int index) const {
  return _impl_.sys_msgs_.Get(index);
}
inline const std::string& GetSysMsgRes::sys_msgs(int index) const {
  // @@protoc_insertion_point(field_get:GetSysMsgRes.sys_msgs)
  return _internal_sys_msgs(index);
}
inline std::string* GetSysMsgRes::mutable_sys_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:GetSysMsgRes.sys_msgs)
  return _impl_.sys_msgs_.Mutable(index);
}
inline void GetSysMsgRes::set_sys_msgs(int index, const std::string& value) {
  _impl_.sys_msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GetSysMsgRes.sys_msgs)
}
inline void GetSysMsgRes::set_sys_msgs(int index, std::string&& value) {
  _impl_.sys_msgs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GetSysMsgRes.sys_msgs)
}
inline void GetSysMsgRes::set_sys_msgs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.sys_msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetSysMsgRes.sys_msgs)
}
inline void GetSysMsgRes::set_sys_msgs(int index, const char* value, size_t size) {
  _impl_.sys_msgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetSysMsgRes.sys_msgs)
}
inline std::string* GetSysMsgRes::_internal_add_sys_msgs() {
  return _impl_.sys_msgs_.Add();
}
inline void GetSysMsgRes::add_sys_msgs(const std::string& value) {
  _impl_.sys_msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetSysMsgRes.sys_msgs)
}
inline void GetSysMsgRes::add_sys_msgs(std::string&& value) {
  _impl_.sys_msgs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetSysMsgRes.sys_msgs)
}
inline void GetSysMsgRes::add_sys_msgs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.sys_msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetSysMsgRes.sys_msgs)
}
inline void GetSysMsgRes::add_sys_msgs(const char* value, size_t size) {
  _impl_.sys_msgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetSysMsgRes.sys_msgs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSysMsgRes::sys_msgs() const {
  // @@protoc_insertion_point(field_list:GetSysMsgRes.sys_msgs)
  return _impl_.sys_msgs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSysMsgRes::mutable_sys_msgs() {
  // @@protoc_insertion_point(field_mutable_list:GetSysMsgRes.sys_msgs)
  return &_impl_.sys_msgs_;
}

// -------------------------------------------------------------------

// LogicLoginRes

// int32 status = 1;
inline void LogicLoginRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t LogicLoginRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t LogicLoginRes::status() const {
  // @@protoc_insertion_point(field_get:LogicLoginRes.status)
  return _internal_status();
}
inline void LogicLoginRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void LogicLoginRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:LogicLoginRes.status)
}

// -------------------------------------------------------------------

// EnterZoneReq

// int32 zid = 1;
inline void EnterZoneReq::clear_zid() {
  _impl_.zid_ = 0;
}
inline int32_t EnterZoneReq::_internal_zid() const {
  return _impl_.zid_;
}
inline int32_t EnterZoneReq::zid() const {
  // @@protoc_insertion_point(field_get:EnterZoneReq.zid)
  return _internal_zid();
}
inline void EnterZoneReq::_internal_set_zid(int32_t value) {
  
  _impl_.zid_ = value;
}
inline void EnterZoneReq::set_zid(int32_t value) {
  _internal_set_zid(value);
  // @@protoc_insertion_point(field_set:EnterZoneReq.zid)
}

// -------------------------------------------------------------------

// EnterZoneRes

// int32 status = 1;
inline void EnterZoneRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t EnterZoneRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t EnterZoneRes::status() const {
  // @@protoc_insertion_point(field_get:EnterZoneRes.status)
  return _internal_status();
}
inline void EnterZoneRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void EnterZoneRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EnterZoneRes.status)
}

// -------------------------------------------------------------------

// OnOtherEnteredMatch

// string unick = 1;
inline void OnOtherEnteredMatch::clear_unick() {
  _impl_.unick_.ClearToEmpty();
}
inline const std::string& OnOtherEnteredMatch::unick() const {
  // @@protoc_insertion_point(field_get:OnOtherEnteredMatch.unick)
  return _internal_unick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OnOtherEnteredMatch::set_unick(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OnOtherEnteredMatch.unick)
}
inline std::string* OnOtherEnteredMatch::mutable_unick() {
  std::string* _s = _internal_mutable_unick();
  // @@protoc_insertion_point(field_mutable:OnOtherEnteredMatch.unick)
  return _s;
}
inline const std::string& OnOtherEnteredMatch::_internal_unick() const {
  return _impl_.unick_.Get();
}
inline void OnOtherEnteredMatch::_internal_set_unick(const std::string& value) {
  
  _impl_.unick_.Set(value, GetArenaForAllocation());
}
inline std::string* OnOtherEnteredMatch::_internal_mutable_unick() {
  
  return _impl_.unick_.Mutable(GetArenaForAllocation());
}
inline std::string* OnOtherEnteredMatch::release_unick() {
  // @@protoc_insertion_point(field_release:OnOtherEnteredMatch.unick)
  return _impl_.unick_.Release();
}
inline void OnOtherEnteredMatch::set_allocated_unick(std::string* unick) {
  if (unick != nullptr) {
    
  } else {
    
  }
  _impl_.unick_.SetAllocated(unick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unick_.IsDefault()) {
    _impl_.unick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OnOtherEnteredMatch.unick)
}

// int32 usex = 2;
inline void OnOtherEnteredMatch::clear_usex() {
  _impl_.usex_ = 0;
}
inline int32_t OnOtherEnteredMatch::_internal_usex() const {
  return _impl_.usex_;
}
inline int32_t OnOtherEnteredMatch::usex() const {
  // @@protoc_insertion_point(field_get:OnOtherEnteredMatch.usex)
  return _internal_usex();
}
inline void OnOtherEnteredMatch::_internal_set_usex(int32_t value) {
  
  _impl_.usex_ = value;
}
inline void OnOtherEnteredMatch::set_usex(int32_t value) {
  _internal_set_usex(value);
  // @@protoc_insertion_point(field_set:OnOtherEnteredMatch.usex)
}

// int32 usysavatar = 3;
inline void OnOtherEnteredMatch::clear_usysavatar() {
  _impl_.usysavatar_ = 0;
}
inline int32_t OnOtherEnteredMatch::_internal_usysavatar() const {
  return _impl_.usysavatar_;
}
inline int32_t OnOtherEnteredMatch::usysavatar() const {
  // @@protoc_insertion_point(field_get:OnOtherEnteredMatch.usysavatar)
  return _internal_usysavatar();
}
inline void OnOtherEnteredMatch::_internal_set_usysavatar(int32_t value) {
  
  _impl_.usysavatar_ = value;
}
inline void OnOtherEnteredMatch::set_usysavatar(int32_t value) {
  _internal_set_usysavatar(value);
  // @@protoc_insertion_point(field_set:OnOtherEnteredMatch.usysavatar)
}

// int32 seatid = 4;
inline void OnOtherEnteredMatch::clear_seatid() {
  _impl_.seatid_ = 0;
}
inline int32_t OnOtherEnteredMatch::_internal_seatid() const {
  return _impl_.seatid_;
}
inline int32_t OnOtherEnteredMatch::seatid() const {
  // @@protoc_insertion_point(field_get:OnOtherEnteredMatch.seatid)
  return _internal_seatid();
}
inline void OnOtherEnteredMatch::_internal_set_seatid(int32_t value) {
  
  _impl_.seatid_ = value;
}
inline void OnOtherEnteredMatch::set_seatid(int32_t value) {
  _internal_set_seatid(value);
  // @@protoc_insertion_point(field_set:OnOtherEnteredMatch.seatid)
}

// int32 teamid = 5;
inline void OnOtherEnteredMatch::clear_teamid() {
  _impl_.teamid_ = 0;
}
inline int32_t OnOtherEnteredMatch::_internal_teamid() const {
  return _impl_.teamid_;
}
inline int32_t OnOtherEnteredMatch::teamid() const {
  // @@protoc_insertion_point(field_get:OnOtherEnteredMatch.teamid)
  return _internal_teamid();
}
inline void OnOtherEnteredMatch::_internal_set_teamid(int32_t value) {
  
  _impl_.teamid_ = value;
}
inline void OnOtherEnteredMatch::set_teamid(int32_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:OnOtherEnteredMatch.teamid)
}

// -------------------------------------------------------------------

// EnterMatch

// int32 zid = 1;
inline void EnterMatch::clear_zid() {
  _impl_.zid_ = 0;
}
inline int32_t EnterMatch::_internal_zid() const {
  return _impl_.zid_;
}
inline int32_t EnterMatch::zid() const {
  // @@protoc_insertion_point(field_get:EnterMatch.zid)
  return _internal_zid();
}
inline void EnterMatch::_internal_set_zid(int32_t value) {
  
  _impl_.zid_ = value;
}
inline void EnterMatch::set_zid(int32_t value) {
  _internal_set_zid(value);
  // @@protoc_insertion_point(field_set:EnterMatch.zid)
}

// int32 matchid = 2;
inline void EnterMatch::clear_matchid() {
  _impl_.matchid_ = 0;
}
inline int32_t EnterMatch::_internal_matchid() const {
  return _impl_.matchid_;
}
inline int32_t EnterMatch::matchid() const {
  // @@protoc_insertion_point(field_get:EnterMatch.matchid)
  return _internal_matchid();
}
inline void EnterMatch::_internal_set_matchid(int32_t value) {
  
  _impl_.matchid_ = value;
}
inline void EnterMatch::set_matchid(int32_t value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:EnterMatch.matchid)
}

// int32 seatid = 3;
inline void EnterMatch::clear_seatid() {
  _impl_.seatid_ = 0;
}
inline int32_t EnterMatch::_internal_seatid() const {
  return _impl_.seatid_;
}
inline int32_t EnterMatch::seatid() const {
  // @@protoc_insertion_point(field_get:EnterMatch.seatid)
  return _internal_seatid();
}
inline void EnterMatch::_internal_set_seatid(int32_t value) {
  
  _impl_.seatid_ = value;
}
inline void EnterMatch::set_seatid(int32_t value) {
  _internal_set_seatid(value);
  // @@protoc_insertion_point(field_set:EnterMatch.seatid)
}

// int32 teamid = 4;
inline void EnterMatch::clear_teamid() {
  _impl_.teamid_ = 0;
}
inline int32_t EnterMatch::_internal_teamid() const {
  return _impl_.teamid_;
}
inline int32_t EnterMatch::teamid() const {
  // @@protoc_insertion_point(field_get:EnterMatch.teamid)
  return _internal_teamid();
}
inline void EnterMatch::_internal_set_teamid(int32_t value) {
  
  _impl_.teamid_ = value;
}
inline void EnterMatch::set_teamid(int32_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:EnterMatch.teamid)
}

// repeated .OnOtherEnteredMatch other_uinfo = 5;
inline int EnterMatch::_internal_other_uinfo_size() const {
  return _impl_.other_uinfo_.size();
}
inline int EnterMatch::other_uinfo_size() const {
  return _internal_other_uinfo_size();
}
inline void EnterMatch::clear_other_uinfo() {
  _impl_.other_uinfo_.Clear();
}
inline ::OnOtherEnteredMatch* EnterMatch::mutable_other_uinfo(int index) {
  // @@protoc_insertion_point(field_mutable:EnterMatch.other_uinfo)
  return _impl_.other_uinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OnOtherEnteredMatch >*
EnterMatch::mutable_other_uinfo() {
  // @@protoc_insertion_point(field_mutable_list:EnterMatch.other_uinfo)
  return &_impl_.other_uinfo_;
}
inline const ::OnOtherEnteredMatch& EnterMatch::_internal_other_uinfo(int index) const {
  return _impl_.other_uinfo_.Get(index);
}
inline const ::OnOtherEnteredMatch& EnterMatch::other_uinfo(int index) const {
  // @@protoc_insertion_point(field_get:EnterMatch.other_uinfo)
  return _internal_other_uinfo(index);
}
inline ::OnOtherEnteredMatch* EnterMatch::_internal_add_other_uinfo() {
  return _impl_.other_uinfo_.Add();
}
inline ::OnOtherEnteredMatch* EnterMatch::add_other_uinfo() {
  ::OnOtherEnteredMatch* _add = _internal_add_other_uinfo();
  // @@protoc_insertion_point(field_add:EnterMatch.other_uinfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OnOtherEnteredMatch >&
EnterMatch::other_uinfo() const {
  // @@protoc_insertion_point(field_list:EnterMatch.other_uinfo)
  return _impl_.other_uinfo_;
}

// -------------------------------------------------------------------

// QuitMatchRes

// int32 status = 1;
inline void QuitMatchRes::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t QuitMatchRes::_internal_status() const {
  return _impl_.status_;
}
inline int32_t QuitMatchRes::status() const {
  // @@protoc_insertion_point(field_get:QuitMatchRes.status)
  return _internal_status();
}
inline void QuitMatchRes::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void QuitMatchRes::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:QuitMatchRes.status)
}

// -------------------------------------------------------------------

// OnOtherQuittedMatch

// int32 seatid = 1;
inline void OnOtherQuittedMatch::clear_seatid() {
  _impl_.seatid_ = 0;
}
inline int32_t OnOtherQuittedMatch::_internal_seatid() const {
  return _impl_.seatid_;
}
inline int32_t OnOtherQuittedMatch::seatid() const {
  // @@protoc_insertion_point(field_get:OnOtherQuittedMatch.seatid)
  return _internal_seatid();
}
inline void OnOtherQuittedMatch::_internal_set_seatid(int32_t value) {
  
  _impl_.seatid_ = value;
}
inline void OnOtherQuittedMatch::set_seatid(int32_t value) {
  _internal_set_seatid(value);
  // @@protoc_insertion_point(field_set:OnOtherQuittedMatch.seatid)
}

// -------------------------------------------------------------------

// CharacterInfo

// int32 teamid = 1;
inline void CharacterInfo::clear_teamid() {
  _impl_.teamid_ = 0;
}
inline int32_t CharacterInfo::_internal_teamid() const {
  return _impl_.teamid_;
}
inline int32_t CharacterInfo::teamid() const {
  // @@protoc_insertion_point(field_get:CharacterInfo.teamid)
  return _internal_teamid();
}
inline void CharacterInfo::_internal_set_teamid(int32_t value) {
  
  _impl_.teamid_ = value;
}
inline void CharacterInfo::set_teamid(int32_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:CharacterInfo.teamid)
}

// int32 seatid = 2;
inline void CharacterInfo::clear_seatid() {
  _impl_.seatid_ = 0;
}
inline int32_t CharacterInfo::_internal_seatid() const {
  return _impl_.seatid_;
}
inline int32_t CharacterInfo::seatid() const {
  // @@protoc_insertion_point(field_get:CharacterInfo.seatid)
  return _internal_seatid();
}
inline void CharacterInfo::_internal_set_seatid(int32_t value) {
  
  _impl_.seatid_ = value;
}
inline void CharacterInfo::set_seatid(int32_t value) {
  _internal_set_seatid(value);
  // @@protoc_insertion_point(field_set:CharacterInfo.seatid)
}

// int32 characterid = 3;
inline void CharacterInfo::clear_characterid() {
  _impl_.characterid_ = 0;
}
inline int32_t CharacterInfo::_internal_characterid() const {
  return _impl_.characterid_;
}
inline int32_t CharacterInfo::characterid() const {
  // @@protoc_insertion_point(field_get:CharacterInfo.characterid)
  return _internal_characterid();
}
inline void CharacterInfo::_internal_set_characterid(int32_t value) {
  
  _impl_.characterid_ = value;
}
inline void CharacterInfo::set_characterid(int32_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:CharacterInfo.characterid)
}

// -------------------------------------------------------------------

// GameStart

// repeated .CharacterInfo characters = 1;
inline int GameStart::_internal_characters_size() const {
  return _impl_.characters_.size();
}
inline int GameStart::characters_size() const {
  return _internal_characters_size();
}
inline void GameStart::clear_characters() {
  _impl_.characters_.Clear();
}
inline ::CharacterInfo* GameStart::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:GameStart.characters)
  return _impl_.characters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CharacterInfo >*
GameStart::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:GameStart.characters)
  return &_impl_.characters_;
}
inline const ::CharacterInfo& GameStart::_internal_characters(int index) const {
  return _impl_.characters_.Get(index);
}
inline const ::CharacterInfo& GameStart::characters(int index) const {
  // @@protoc_insertion_point(field_get:GameStart.characters)
  return _internal_characters(index);
}
inline ::CharacterInfo* GameStart::_internal_add_characters() {
  return _impl_.characters_.Add();
}
inline ::CharacterInfo* GameStart::add_characters() {
  ::CharacterInfo* _add = _internal_add_characters();
  // @@protoc_insertion_point(field_add:GameStart.characters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CharacterInfo >&
GameStart::characters() const {
  // @@protoc_insertion_point(field_list:GameStart.characters)
  return _impl_.characters_;
}

// -------------------------------------------------------------------

// LogicLoginReq

// string udp_ip = 1;
inline void LogicLoginReq::clear_udp_ip() {
  _impl_.udp_ip_.ClearToEmpty();
}
inline const std::string& LogicLoginReq::udp_ip() const {
  // @@protoc_insertion_point(field_get:LogicLoginReq.udp_ip)
  return _internal_udp_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogicLoginReq::set_udp_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.udp_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LogicLoginReq.udp_ip)
}
inline std::string* LogicLoginReq::mutable_udp_ip() {
  std::string* _s = _internal_mutable_udp_ip();
  // @@protoc_insertion_point(field_mutable:LogicLoginReq.udp_ip)
  return _s;
}
inline const std::string& LogicLoginReq::_internal_udp_ip() const {
  return _impl_.udp_ip_.Get();
}
inline void LogicLoginReq::_internal_set_udp_ip(const std::string& value) {
  
  _impl_.udp_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* LogicLoginReq::_internal_mutable_udp_ip() {
  
  return _impl_.udp_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* LogicLoginReq::release_udp_ip() {
  // @@protoc_insertion_point(field_release:LogicLoginReq.udp_ip)
  return _impl_.udp_ip_.Release();
}
inline void LogicLoginReq::set_allocated_udp_ip(std::string* udp_ip) {
  if (udp_ip != nullptr) {
    
  } else {
    
  }
  _impl_.udp_ip_.SetAllocated(udp_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.udp_ip_.IsDefault()) {
    _impl_.udp_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LogicLoginReq.udp_ip)
}

// int32 udp_port = 2;
inline void LogicLoginReq::clear_udp_port() {
  _impl_.udp_port_ = 0;
}
inline int32_t LogicLoginReq::_internal_udp_port() const {
  return _impl_.udp_port_;
}
inline int32_t LogicLoginReq::udp_port() const {
  // @@protoc_insertion_point(field_get:LogicLoginReq.udp_port)
  return _internal_udp_port();
}
inline void LogicLoginReq::_internal_set_udp_port(int32_t value) {
  
  _impl_.udp_port_ = value;
}
inline void LogicLoginReq::set_udp_port(int32_t value) {
  _internal_set_udp_port(value);
  // @@protoc_insertion_point(field_set:LogicLoginReq.udp_port)
}

// -------------------------------------------------------------------

// OptionEvent

// int32 seatid = 1;
inline void OptionEvent::clear_seatid() {
  _impl_.seatid_ = 0;
}
inline int32_t OptionEvent::_internal_seatid() const {
  return _impl_.seatid_;
}
inline int32_t OptionEvent::seatid() const {
  // @@protoc_insertion_point(field_get:OptionEvent.seatid)
  return _internal_seatid();
}
inline void OptionEvent::_internal_set_seatid(int32_t value) {
  
  _impl_.seatid_ = value;
}
inline void OptionEvent::set_seatid(int32_t value) {
  _internal_set_seatid(value);
  // @@protoc_insertion_point(field_set:OptionEvent.seatid)
}

// int32 opt_type = 2;
inline void OptionEvent::clear_opt_type() {
  _impl_.opt_type_ = 0;
}
inline int32_t OptionEvent::_internal_opt_type() const {
  return _impl_.opt_type_;
}
inline int32_t OptionEvent::opt_type() const {
  // @@protoc_insertion_point(field_get:OptionEvent.opt_type)
  return _internal_opt_type();
}
inline void OptionEvent::_internal_set_opt_type(int32_t value) {
  
  _impl_.opt_type_ = value;
}
inline void OptionEvent::set_opt_type(int32_t value) {
  _internal_set_opt_type(value);
  // @@protoc_insertion_point(field_set:OptionEvent.opt_type)
}

// int32 x = 3;
inline void OptionEvent::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t OptionEvent::_internal_x() const {
  return _impl_.x_;
}
inline int32_t OptionEvent::x() const {
  // @@protoc_insertion_point(field_get:OptionEvent.x)
  return _internal_x();
}
inline void OptionEvent::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void OptionEvent::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:OptionEvent.x)
}

// int32 y = 4;
inline void OptionEvent::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t OptionEvent::_internal_y() const {
  return _impl_.y_;
}
inline int32_t OptionEvent::y() const {
  // @@protoc_insertion_point(field_get:OptionEvent.y)
  return _internal_y();
}
inline void OptionEvent::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void OptionEvent::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:OptionEvent.y)
}

// -------------------------------------------------------------------

// FrameOpts

// int32 frameid = 1;
inline void FrameOpts::clear_frameid() {
  _impl_.frameid_ = 0;
}
inline int32_t FrameOpts::_internal_frameid() const {
  return _impl_.frameid_;
}
inline int32_t FrameOpts::frameid() const {
  // @@protoc_insertion_point(field_get:FrameOpts.frameid)
  return _internal_frameid();
}
inline void FrameOpts::_internal_set_frameid(int32_t value) {
  
  _impl_.frameid_ = value;
}
inline void FrameOpts::set_frameid(int32_t value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:FrameOpts.frameid)
}

// repeated .OptionEvent opts = 2;
inline int FrameOpts::_internal_opts_size() const {
  return _impl_.opts_.size();
}
inline int FrameOpts::opts_size() const {
  return _internal_opts_size();
}
inline void FrameOpts::clear_opts() {
  _impl_.opts_.Clear();
}
inline ::OptionEvent* FrameOpts::mutable_opts(int index) {
  // @@protoc_insertion_point(field_mutable:FrameOpts.opts)
  return _impl_.opts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >*
FrameOpts::mutable_opts() {
  // @@protoc_insertion_point(field_mutable_list:FrameOpts.opts)
  return &_impl_.opts_;
}
inline const ::OptionEvent& FrameOpts::_internal_opts(int index) const {
  return _impl_.opts_.Get(index);
}
inline const ::OptionEvent& FrameOpts::opts(int index) const {
  // @@protoc_insertion_point(field_get:FrameOpts.opts)
  return _internal_opts(index);
}
inline ::OptionEvent* FrameOpts::_internal_add_opts() {
  return _impl_.opts_.Add();
}
inline ::OptionEvent* FrameOpts::add_opts() {
  ::OptionEvent* _add = _internal_add_opts();
  // @@protoc_insertion_point(field_add:FrameOpts.opts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >&
FrameOpts::opts() const {
  // @@protoc_insertion_point(field_list:FrameOpts.opts)
  return _impl_.opts_;
}

// -------------------------------------------------------------------

// LogicFrame

// int32 frameid = 1;
inline void LogicFrame::clear_frameid() {
  _impl_.frameid_ = 0;
}
inline int32_t LogicFrame::_internal_frameid() const {
  return _impl_.frameid_;
}
inline int32_t LogicFrame::frameid() const {
  // @@protoc_insertion_point(field_get:LogicFrame.frameid)
  return _internal_frameid();
}
inline void LogicFrame::_internal_set_frameid(int32_t value) {
  
  _impl_.frameid_ = value;
}
inline void LogicFrame::set_frameid(int32_t value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:LogicFrame.frameid)
}

// repeated .FrameOpts unsync_frames = 2;
inline int LogicFrame::_internal_unsync_frames_size() const {
  return _impl_.unsync_frames_.size();
}
inline int LogicFrame::unsync_frames_size() const {
  return _internal_unsync_frames_size();
}
inline void LogicFrame::clear_unsync_frames() {
  _impl_.unsync_frames_.Clear();
}
inline ::FrameOpts* LogicFrame::mutable_unsync_frames(int index) {
  // @@protoc_insertion_point(field_mutable:LogicFrame.unsync_frames)
  return _impl_.unsync_frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameOpts >*
LogicFrame::mutable_unsync_frames() {
  // @@protoc_insertion_point(field_mutable_list:LogicFrame.unsync_frames)
  return &_impl_.unsync_frames_;
}
inline const ::FrameOpts& LogicFrame::_internal_unsync_frames(int index) const {
  return _impl_.unsync_frames_.Get(index);
}
inline const ::FrameOpts& LogicFrame::unsync_frames(int index) const {
  // @@protoc_insertion_point(field_get:LogicFrame.unsync_frames)
  return _internal_unsync_frames(index);
}
inline ::FrameOpts* LogicFrame::_internal_add_unsync_frames() {
  return _impl_.unsync_frames_.Add();
}
inline ::FrameOpts* LogicFrame::add_unsync_frames() {
  ::FrameOpts* _add = _internal_add_unsync_frames();
  // @@protoc_insertion_point(field_add:LogicFrame.unsync_frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameOpts >&
LogicFrame::unsync_frames() const {
  // @@protoc_insertion_point(field_list:LogicFrame.unsync_frames)
  return _impl_.unsync_frames_;
}

// -------------------------------------------------------------------

// NextFrameOpt

// int32 frameid = 1;
inline void NextFrameOpt::clear_frameid() {
  _impl_.frameid_ = 0;
}
inline int32_t NextFrameOpt::_internal_frameid() const {
  return _impl_.frameid_;
}
inline int32_t NextFrameOpt::frameid() const {
  // @@protoc_insertion_point(field_get:NextFrameOpt.frameid)
  return _internal_frameid();
}
inline void NextFrameOpt::_internal_set_frameid(int32_t value) {
  
  _impl_.frameid_ = value;
}
inline void NextFrameOpt::set_frameid(int32_t value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:NextFrameOpt.frameid)
}

// int32 zid = 2;
inline void NextFrameOpt::clear_zid() {
  _impl_.zid_ = 0;
}
inline int32_t NextFrameOpt::_internal_zid() const {
  return _impl_.zid_;
}
inline int32_t NextFrameOpt::zid() const {
  // @@protoc_insertion_point(field_get:NextFrameOpt.zid)
  return _internal_zid();
}
inline void NextFrameOpt::_internal_set_zid(int32_t value) {
  
  _impl_.zid_ = value;
}
inline void NextFrameOpt::set_zid(int32_t value) {
  _internal_set_zid(value);
  // @@protoc_insertion_point(field_set:NextFrameOpt.zid)
}

// int32 matchid = 3;
inline void NextFrameOpt::clear_matchid() {
  _impl_.matchid_ = 0;
}
inline int32_t NextFrameOpt::_internal_matchid() const {
  return _impl_.matchid_;
}
inline int32_t NextFrameOpt::matchid() const {
  // @@protoc_insertion_point(field_get:NextFrameOpt.matchid)
  return _internal_matchid();
}
inline void NextFrameOpt::_internal_set_matchid(int32_t value) {
  
  _impl_.matchid_ = value;
}
inline void NextFrameOpt::set_matchid(int32_t value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:NextFrameOpt.matchid)
}

// int32 seatid = 4;
inline void NextFrameOpt::clear_seatid() {
  _impl_.seatid_ = 0;
}
inline int32_t NextFrameOpt::_internal_seatid() const {
  return _impl_.seatid_;
}
inline int32_t NextFrameOpt::seatid() const {
  // @@protoc_insertion_point(field_get:NextFrameOpt.seatid)
  return _internal_seatid();
}
inline void NextFrameOpt::_internal_set_seatid(int32_t value) {
  
  _impl_.seatid_ = value;
}
inline void NextFrameOpt::set_seatid(int32_t value) {
  _internal_set_seatid(value);
  // @@protoc_insertion_point(field_set:NextFrameOpt.seatid)
}

// repeated .OptionEvent opts = 5;
inline int NextFrameOpt::_internal_opts_size() const {
  return _impl_.opts_.size();
}
inline int NextFrameOpt::opts_size() const {
  return _internal_opts_size();
}
inline void NextFrameOpt::clear_opts() {
  _impl_.opts_.Clear();
}
inline ::OptionEvent* NextFrameOpt::mutable_opts(int index) {
  // @@protoc_insertion_point(field_mutable:NextFrameOpt.opts)
  return _impl_.opts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >*
NextFrameOpt::mutable_opts() {
  // @@protoc_insertion_point(field_mutable_list:NextFrameOpt.opts)
  return &_impl_.opts_;
}
inline const ::OptionEvent& NextFrameOpt::_internal_opts(int index) const {
  return _impl_.opts_.Get(index);
}
inline const ::OptionEvent& NextFrameOpt::opts(int index) const {
  // @@protoc_insertion_point(field_get:NextFrameOpt.opts)
  return _internal_opts(index);
}
inline ::OptionEvent* NextFrameOpt::_internal_add_opts() {
  return _impl_.opts_.Add();
}
inline ::OptionEvent* NextFrameOpt::add_opts() {
  ::OptionEvent* _add = _internal_add_opts();
  // @@protoc_insertion_point(field_add:NextFrameOpt.opts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OptionEvent >&
NextFrameOpt::opts() const {
  // @@protoc_insertion_point(field_list:NextFrameOpt.opts)
  return _impl_.opts_;
}

// -------------------------------------------------------------------

// GameFinishedRes

// int32 winner_teamid = 1;
inline void GameFinishedRes::clear_winner_teamid() {
  _impl_.winner_teamid_ = 0;
}
inline int32_t GameFinishedRes::_internal_winner_teamid() const {
  return _impl_.winner_teamid_;
}
inline int32_t GameFinishedRes::winner_teamid() const {
  // @@protoc_insertion_point(field_get:GameFinishedRes.winner_teamid)
  return _internal_winner_teamid();
}
inline void GameFinishedRes::_internal_set_winner_teamid(int32_t value) {
  
  _impl_.winner_teamid_ = value;
}
inline void GameFinishedRes::set_winner_teamid(int32_t value) {
  _internal_set_winner_teamid(value);
  // @@protoc_insertion_point(field_set:GameFinishedRes.winner_teamid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Stype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Stype>() {
  return ::Stype_descriptor();
}
template <> struct is_proto_enum< ::Cmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd>() {
  return ::Cmd_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2eproto
