// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR GuestLoginReq::GuestLoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guest_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuestLoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuestLoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuestLoginReqDefaultTypeInternal() {}
  union {
    GuestLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuestLoginReqDefaultTypeInternal _GuestLoginReq_default_instance_;
PROTOBUF_CONSTEXPR UserLoginReq::UserLoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.upwd_md5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserLoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLoginReqDefaultTypeInternal() {}
  union {
    UserLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLoginReqDefaultTypeInternal _UserLoginReq_default_instance_;
PROTOBUF_CONSTEXPR UserCenterInfo::UserCenterInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unick_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usex_)*/0
  , /*decltype(_impl_.usysavatar_)*/0
  , /*decltype(_impl_.uvip_)*/0
  , /*decltype(_impl_.uid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserCenterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserCenterInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserCenterInfoDefaultTypeInternal() {}
  union {
    UserCenterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserCenterInfoDefaultTypeInternal _UserCenterInfo_default_instance_;
PROTOBUF_CONSTEXPR GuestLoginRes::GuestLoginRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uinfo_)*/nullptr
  , /*decltype(_impl_.status_)*/0} {}
struct GuestLoginResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuestLoginResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuestLoginResDefaultTypeInternal() {}
  union {
    GuestLoginRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuestLoginResDefaultTypeInternal _GuestLoginRes_default_instance_;
PROTOBUF_CONSTEXPR UserLoginRes::UserLoginRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uinfo_)*/nullptr
  , /*decltype(_impl_.status_)*/0} {}
struct UserLoginResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLoginResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLoginResDefaultTypeInternal() {}
  union {
    UserLoginRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLoginResDefaultTypeInternal _UserLoginRes_default_instance_;
PROTOBUF_CONSTEXPR EditProfileReq::EditProfileReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unick_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usex_)*/0
  , /*decltype(_impl_.usysavatar_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EditProfileReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditProfileReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditProfileReqDefaultTypeInternal() {}
  union {
    EditProfileReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditProfileReqDefaultTypeInternal _EditProfileReq_default_instance_;
PROTOBUF_CONSTEXPR EditProfileRes::EditProfileRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EditProfileResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditProfileResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditProfileResDefaultTypeInternal() {}
  union {
    EditProfileRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditProfileResDefaultTypeInternal _EditProfileRes_default_instance_;
PROTOBUF_CONSTEXPR GuestUpgradeReq::GuestUpgradeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.upwd_md5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuestUpgradeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuestUpgradeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuestUpgradeReqDefaultTypeInternal() {}
  union {
    GuestUpgradeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuestUpgradeReqDefaultTypeInternal _GuestUpgradeReq_default_instance_;
PROTOBUF_CONSTEXPR GuestUpgradeRes::GuestUpgradeRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuestUpgradeResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuestUpgradeResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuestUpgradeResDefaultTypeInternal() {}
  union {
    GuestUpgradeRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuestUpgradeResDefaultTypeInternal _GuestUpgradeRes_default_instance_;
PROTOBUF_CONSTEXPR LogoutRes::LogoutRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogoutResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogoutResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogoutResDefaultTypeInternal() {}
  union {
    LogoutRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogoutResDefaultTypeInternal _LogoutRes_default_instance_;
PROTOBUF_CONSTEXPR GetUGameInfo::GetUGameInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uchip_)*/0
  , /*decltype(_impl_.uexp_)*/0
  , /*decltype(_impl_.uvip_)*/0
  , /*decltype(_impl_.uchip2_)*/0
  , /*decltype(_impl_.uchip3_)*/0
  , /*decltype(_impl_.udata1_)*/0
  , /*decltype(_impl_.udata2_)*/0
  , /*decltype(_impl_.udata3_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUGameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUGameInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUGameInfoDefaultTypeInternal() {}
  union {
    GetUGameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUGameInfoDefaultTypeInternal _GetUGameInfo_default_instance_;
PROTOBUF_CONSTEXPR GetUGameInfoRes::GetUGameInfoRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uinfo_)*/nullptr
  , /*decltype(_impl_.status_)*/0} {}
struct GetUGameInfoResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUGameInfoResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUGameInfoResDefaultTypeInternal() {}
  union {
    GetUGameInfoRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUGameInfoResDefaultTypeInternal _GetUGameInfoRes_default_instance_;
PROTOBUF_CONSTEXPR RecvLoginBonusRes::RecvLoginBonusRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecvLoginBonusResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecvLoginBonusResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecvLoginBonusResDefaultTypeInternal() {}
  union {
    RecvLoginBonusRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecvLoginBonusResDefaultTypeInternal _RecvLoginBonusRes_default_instance_;
PROTOBUF_CONSTEXPR WorldRankUchip::WorldRankUchip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unick_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usex_)*/0
  , /*decltype(_impl_.usysavatar_)*/0
  , /*decltype(_impl_.uvip_)*/0
  , /*decltype(_impl_.uchip_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorldRankUchipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldRankUchipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldRankUchipDefaultTypeInternal() {}
  union {
    WorldRankUchip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldRankUchipDefaultTypeInternal _WorldRankUchip_default_instance_;
PROTOBUF_CONSTEXPR GetWorldRankUchipRes::GetWorldRankUchipRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rank_info_)*/{}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWorldRankUchipResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorldRankUchipResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorldRankUchipResDefaultTypeInternal() {}
  union {
    GetWorldRankUchipRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorldRankUchipResDefaultTypeInternal _GetWorldRankUchipRes_default_instance_;
PROTOBUF_CONSTEXPR GetSysMsgReq::GetSysMsgReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ver_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSysMsgReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSysMsgReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSysMsgReqDefaultTypeInternal() {}
  union {
    GetSysMsgReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSysMsgReqDefaultTypeInternal _GetSysMsgReq_default_instance_;
PROTOBUF_CONSTEXPR GetSysMsgRes::GetSysMsgRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sys_msgs_)*/{}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.ver_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSysMsgResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSysMsgResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSysMsgResDefaultTypeInternal() {}
  union {
    GetSysMsgRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSysMsgResDefaultTypeInternal _GetSysMsgRes_default_instance_;
PROTOBUF_CONSTEXPR LogicLoginRes::LogicLoginRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogicLoginResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicLoginResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicLoginResDefaultTypeInternal() {}
  union {
    LogicLoginRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicLoginResDefaultTypeInternal _LogicLoginRes_default_instance_;
PROTOBUF_CONSTEXPR EnterZoneReq::EnterZoneReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.zid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnterZoneReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnterZoneReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnterZoneReqDefaultTypeInternal() {}
  union {
    EnterZoneReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnterZoneReqDefaultTypeInternal _EnterZoneReq_default_instance_;
PROTOBUF_CONSTEXPR EnterZoneRes::EnterZoneRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnterZoneResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnterZoneResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnterZoneResDefaultTypeInternal() {}
  union {
    EnterZoneRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnterZoneResDefaultTypeInternal _EnterZoneRes_default_instance_;
PROTOBUF_CONSTEXPR OnOtherEnteredMatch::OnOtherEnteredMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unick_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usex_)*/0
  , /*decltype(_impl_.usysavatar_)*/0
  , /*decltype(_impl_.seatid_)*/0
  , /*decltype(_impl_.teamid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OnOtherEnteredMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnOtherEnteredMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnOtherEnteredMatchDefaultTypeInternal() {}
  union {
    OnOtherEnteredMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnOtherEnteredMatchDefaultTypeInternal _OnOtherEnteredMatch_default_instance_;
PROTOBUF_CONSTEXPR EnterMatch::EnterMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.other_uinfo_)*/{}
  , /*decltype(_impl_.zid_)*/0
  , /*decltype(_impl_.matchid_)*/0
  , /*decltype(_impl_.seatid_)*/0
  , /*decltype(_impl_.teamid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnterMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnterMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnterMatchDefaultTypeInternal() {}
  union {
    EnterMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnterMatchDefaultTypeInternal _EnterMatch_default_instance_;
PROTOBUF_CONSTEXPR QuitMatchRes::QuitMatchRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuitMatchResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuitMatchResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuitMatchResDefaultTypeInternal() {}
  union {
    QuitMatchRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuitMatchResDefaultTypeInternal _QuitMatchRes_default_instance_;
PROTOBUF_CONSTEXPR OnOtherQuittedMatch::OnOtherQuittedMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seatid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OnOtherQuittedMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnOtherQuittedMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnOtherQuittedMatchDefaultTypeInternal() {}
  union {
    OnOtherQuittedMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnOtherQuittedMatchDefaultTypeInternal _OnOtherQuittedMatch_default_instance_;
PROTOBUF_CONSTEXPR CharacterInfo::CharacterInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.teamid_)*/0
  , /*decltype(_impl_.seatid_)*/0
  , /*decltype(_impl_.characterid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharacterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterInfoDefaultTypeInternal() {}
  union {
    CharacterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterInfoDefaultTypeInternal _CharacterInfo_default_instance_;
PROTOBUF_CONSTEXPR GameStart::GameStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.characters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStartDefaultTypeInternal() {}
  union {
    GameStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStartDefaultTypeInternal _GameStart_default_instance_;
PROTOBUF_CONSTEXPR LogicLoginReq::LogicLoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.udp_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.udp_port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogicLoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicLoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicLoginReqDefaultTypeInternal() {}
  union {
    LogicLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicLoginReqDefaultTypeInternal _LogicLoginReq_default_instance_;
PROTOBUF_CONSTEXPR OptionEvent::OptionEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seatid_)*/0
  , /*decltype(_impl_.opt_type_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptionEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionEventDefaultTypeInternal() {}
  union {
    OptionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionEventDefaultTypeInternal _OptionEvent_default_instance_;
PROTOBUF_CONSTEXPR FrameOpts::FrameOpts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.opts_)*/{}
  , /*decltype(_impl_.frameid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FrameOptsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameOptsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameOptsDefaultTypeInternal() {}
  union {
    FrameOpts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameOptsDefaultTypeInternal _FrameOpts_default_instance_;
PROTOBUF_CONSTEXPR LogicFrame::LogicFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unsync_frames_)*/{}
  , /*decltype(_impl_.frameid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogicFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicFrameDefaultTypeInternal() {}
  union {
    LogicFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicFrameDefaultTypeInternal _LogicFrame_default_instance_;
PROTOBUF_CONSTEXPR NextFrameOpt::NextFrameOpt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.opts_)*/{}
  , /*decltype(_impl_.frameid_)*/0
  , /*decltype(_impl_.zid_)*/0
  , /*decltype(_impl_.matchid_)*/0
  , /*decltype(_impl_.seatid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NextFrameOptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NextFrameOptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NextFrameOptDefaultTypeInternal() {}
  union {
    NextFrameOpt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NextFrameOptDefaultTypeInternal _NextFrameOpt_default_instance_;
PROTOBUF_CONSTEXPR GameFinishedRes::GameFinishedRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.winner_teamid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameFinishedResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameFinishedResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameFinishedResDefaultTypeInternal() {}
  union {
    GameFinishedRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameFinishedResDefaultTypeInternal _GameFinishedRes_default_instance_;
static ::_pb::Metadata file_level_metadata_game_2eproto[32];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_game_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_game_2eproto = nullptr;

const uint32_t TableStruct_game_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GuestLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GuestLoginReq, _impl_.guest_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserLoginReq, _impl_.uname_),
  PROTOBUF_FIELD_OFFSET(::UserLoginReq, _impl_.upwd_md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserCenterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserCenterInfo, _impl_.unick_),
  PROTOBUF_FIELD_OFFSET(::UserCenterInfo, _impl_.usex_),
  PROTOBUF_FIELD_OFFSET(::UserCenterInfo, _impl_.usysavatar_),
  PROTOBUF_FIELD_OFFSET(::UserCenterInfo, _impl_.uvip_),
  PROTOBUF_FIELD_OFFSET(::UserCenterInfo, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::GuestLoginRes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GuestLoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GuestLoginRes, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::GuestLoginRes, _impl_.uinfo_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::UserLoginRes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::UserLoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserLoginRes, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::UserLoginRes, _impl_.uinfo_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EditProfileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EditProfileReq, _impl_.unick_),
  PROTOBUF_FIELD_OFFSET(::EditProfileReq, _impl_.usex_),
  PROTOBUF_FIELD_OFFSET(::EditProfileReq, _impl_.usysavatar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EditProfileRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EditProfileRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GuestUpgradeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GuestUpgradeReq, _impl_.uname_),
  PROTOBUF_FIELD_OFFSET(::GuestUpgradeReq, _impl_.upwd_md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GuestUpgradeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GuestUpgradeRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogoutRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LogoutRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetUGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetUGameInfo, _impl_.uchip_),
  PROTOBUF_FIELD_OFFSET(::GetUGameInfo, _impl_.uexp_),
  PROTOBUF_FIELD_OFFSET(::GetUGameInfo, _impl_.uvip_),
  PROTOBUF_FIELD_OFFSET(::GetUGameInfo, _impl_.uchip2_),
  PROTOBUF_FIELD_OFFSET(::GetUGameInfo, _impl_.uchip3_),
  PROTOBUF_FIELD_OFFSET(::GetUGameInfo, _impl_.udata1_),
  PROTOBUF_FIELD_OFFSET(::GetUGameInfo, _impl_.udata2_),
  PROTOBUF_FIELD_OFFSET(::GetUGameInfo, _impl_.udata3_),
  PROTOBUF_FIELD_OFFSET(::GetUGameInfoRes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GetUGameInfoRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetUGameInfoRes, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::GetUGameInfoRes, _impl_.uinfo_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RecvLoginBonusRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RecvLoginBonusRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorldRankUchip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WorldRankUchip, _impl_.unick_),
  PROTOBUF_FIELD_OFFSET(::WorldRankUchip, _impl_.usex_),
  PROTOBUF_FIELD_OFFSET(::WorldRankUchip, _impl_.usysavatar_),
  PROTOBUF_FIELD_OFFSET(::WorldRankUchip, _impl_.uvip_),
  PROTOBUF_FIELD_OFFSET(::WorldRankUchip, _impl_.uchip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetWorldRankUchipRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetWorldRankUchipRes, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::GetWorldRankUchipRes, _impl_.rank_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetSysMsgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetSysMsgReq, _impl_.ver_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetSysMsgRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetSysMsgRes, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::GetSysMsgRes, _impl_.ver_num_),
  PROTOBUF_FIELD_OFFSET(::GetSysMsgRes, _impl_.sys_msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicLoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LogicLoginRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnterZoneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EnterZoneReq, _impl_.zid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnterZoneRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EnterZoneRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OnOtherEnteredMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OnOtherEnteredMatch, _impl_.unick_),
  PROTOBUF_FIELD_OFFSET(::OnOtherEnteredMatch, _impl_.usex_),
  PROTOBUF_FIELD_OFFSET(::OnOtherEnteredMatch, _impl_.usysavatar_),
  PROTOBUF_FIELD_OFFSET(::OnOtherEnteredMatch, _impl_.seatid_),
  PROTOBUF_FIELD_OFFSET(::OnOtherEnteredMatch, _impl_.teamid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnterMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EnterMatch, _impl_.zid_),
  PROTOBUF_FIELD_OFFSET(::EnterMatch, _impl_.matchid_),
  PROTOBUF_FIELD_OFFSET(::EnterMatch, _impl_.seatid_),
  PROTOBUF_FIELD_OFFSET(::EnterMatch, _impl_.teamid_),
  PROTOBUF_FIELD_OFFSET(::EnterMatch, _impl_.other_uinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QuitMatchRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QuitMatchRes, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OnOtherQuittedMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OnOtherQuittedMatch, _impl_.seatid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CharacterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CharacterInfo, _impl_.teamid_),
  PROTOBUF_FIELD_OFFSET(::CharacterInfo, _impl_.seatid_),
  PROTOBUF_FIELD_OFFSET(::CharacterInfo, _impl_.characterid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameStart, _impl_.characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LogicLoginReq, _impl_.udp_ip_),
  PROTOBUF_FIELD_OFFSET(::LogicLoginReq, _impl_.udp_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OptionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OptionEvent, _impl_.seatid_),
  PROTOBUF_FIELD_OFFSET(::OptionEvent, _impl_.opt_type_),
  PROTOBUF_FIELD_OFFSET(::OptionEvent, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::OptionEvent, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FrameOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FrameOpts, _impl_.frameid_),
  PROTOBUF_FIELD_OFFSET(::FrameOpts, _impl_.opts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LogicFrame, _impl_.frameid_),
  PROTOBUF_FIELD_OFFSET(::LogicFrame, _impl_.unsync_frames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NextFrameOpt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NextFrameOpt, _impl_.frameid_),
  PROTOBUF_FIELD_OFFSET(::NextFrameOpt, _impl_.zid_),
  PROTOBUF_FIELD_OFFSET(::NextFrameOpt, _impl_.matchid_),
  PROTOBUF_FIELD_OFFSET(::NextFrameOpt, _impl_.seatid_),
  PROTOBUF_FIELD_OFFSET(::NextFrameOpt, _impl_.opts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameFinishedRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameFinishedRes, _impl_.winner_teamid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::GuestLoginReq)},
  { 7, -1, -1, sizeof(::UserLoginReq)},
  { 15, -1, -1, sizeof(::UserCenterInfo)},
  { 26, 34, -1, sizeof(::GuestLoginRes)},
  { 36, 44, -1, sizeof(::UserLoginRes)},
  { 46, -1, -1, sizeof(::EditProfileReq)},
  { 55, -1, -1, sizeof(::EditProfileRes)},
  { 62, -1, -1, sizeof(::GuestUpgradeReq)},
  { 70, -1, -1, sizeof(::GuestUpgradeRes)},
  { 77, -1, -1, sizeof(::LogoutRes)},
  { 84, -1, -1, sizeof(::GetUGameInfo)},
  { 98, 106, -1, sizeof(::GetUGameInfoRes)},
  { 108, -1, -1, sizeof(::RecvLoginBonusRes)},
  { 115, -1, -1, sizeof(::WorldRankUchip)},
  { 126, -1, -1, sizeof(::GetWorldRankUchipRes)},
  { 134, -1, -1, sizeof(::GetSysMsgReq)},
  { 141, -1, -1, sizeof(::GetSysMsgRes)},
  { 150, -1, -1, sizeof(::LogicLoginRes)},
  { 157, -1, -1, sizeof(::EnterZoneReq)},
  { 164, -1, -1, sizeof(::EnterZoneRes)},
  { 171, -1, -1, sizeof(::OnOtherEnteredMatch)},
  { 182, -1, -1, sizeof(::EnterMatch)},
  { 193, -1, -1, sizeof(::QuitMatchRes)},
  { 200, -1, -1, sizeof(::OnOtherQuittedMatch)},
  { 207, -1, -1, sizeof(::CharacterInfo)},
  { 216, -1, -1, sizeof(::GameStart)},
  { 223, -1, -1, sizeof(::LogicLoginReq)},
  { 231, -1, -1, sizeof(::OptionEvent)},
  { 241, -1, -1, sizeof(::FrameOpts)},
  { 249, -1, -1, sizeof(::LogicFrame)},
  { 257, -1, -1, sizeof(::NextFrameOpt)},
  { 268, -1, -1, sizeof(::GameFinishedRes)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_GuestLoginReq_default_instance_._instance,
  &::_UserLoginReq_default_instance_._instance,
  &::_UserCenterInfo_default_instance_._instance,
  &::_GuestLoginRes_default_instance_._instance,
  &::_UserLoginRes_default_instance_._instance,
  &::_EditProfileReq_default_instance_._instance,
  &::_EditProfileRes_default_instance_._instance,
  &::_GuestUpgradeReq_default_instance_._instance,
  &::_GuestUpgradeRes_default_instance_._instance,
  &::_LogoutRes_default_instance_._instance,
  &::_GetUGameInfo_default_instance_._instance,
  &::_GetUGameInfoRes_default_instance_._instance,
  &::_RecvLoginBonusRes_default_instance_._instance,
  &::_WorldRankUchip_default_instance_._instance,
  &::_GetWorldRankUchipRes_default_instance_._instance,
  &::_GetSysMsgReq_default_instance_._instance,
  &::_GetSysMsgRes_default_instance_._instance,
  &::_LogicLoginRes_default_instance_._instance,
  &::_EnterZoneReq_default_instance_._instance,
  &::_EnterZoneRes_default_instance_._instance,
  &::_OnOtherEnteredMatch_default_instance_._instance,
  &::_EnterMatch_default_instance_._instance,
  &::_QuitMatchRes_default_instance_._instance,
  &::_OnOtherQuittedMatch_default_instance_._instance,
  &::_CharacterInfo_default_instance_._instance,
  &::_GameStart_default_instance_._instance,
  &::_LogicLoginReq_default_instance_._instance,
  &::_OptionEvent_default_instance_._instance,
  &::_FrameOpts_default_instance_._instance,
  &::_LogicFrame_default_instance_._instance,
  &::_NextFrameOpt_default_instance_._instance,
  &::_GameFinishedRes_default_instance_._instance,
};

const char descriptor_table_protodef_game_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ngame.proto\"\"\n\rGuestLoginReq\022\021\n\tguest_k"
  "ey\030\001 \001(\t\"/\n\014UserLoginReq\022\r\n\005uname\030\001 \001(\t\022"
  "\020\n\010upwd_md5\030\002 \001(\t\"\\\n\016UserCenterInfo\022\r\n\005u"
  "nick\030\001 \001(\t\022\014\n\004usex\030\002 \001(\005\022\022\n\nusysavatar\030\003"
  " \001(\005\022\014\n\004uvip\030\004 \001(\005\022\013\n\003uid\030\005 \001(\005\"N\n\rGuest"
  "LoginRes\022\016\n\006status\030\001 \001(\005\022#\n\005uinfo\030\002 \001(\0132"
  "\017.UserCenterInfoH\000\210\001\001B\010\n\006_uinfo\"M\n\014UserL"
  "oginRes\022\016\n\006status\030\001 \001(\005\022#\n\005uinfo\030\002 \001(\0132\017"
  ".UserCenterInfoH\000\210\001\001B\010\n\006_uinfo\"A\n\016EditPr"
  "ofileReq\022\r\n\005unick\030\001 \001(\t\022\014\n\004usex\030\002 \001(\005\022\022\n"
  "\nusysavatar\030\003 \001(\005\" \n\016EditProfileRes\022\016\n\006s"
  "tatus\030\001 \001(\005\"2\n\017GuestUpgradeReq\022\r\n\005uname\030"
  "\001 \001(\t\022\020\n\010upwd_md5\030\002 \001(\t\"!\n\017GuestUpgradeR"
  "es\022\016\n\006status\030\001 \001(\005\"\033\n\tLogoutRes\022\016\n\006statu"
  "s\030\001 \001(\005\"\211\001\n\014GetUGameInfo\022\r\n\005uchip\030\001 \001(\005\022"
  "\014\n\004uexp\030\002 \001(\005\022\014\n\004uvip\030\003 \001(\005\022\016\n\006uchip2\030\004 "
  "\001(\005\022\016\n\006uchip3\030\005 \001(\005\022\016\n\006udata1\030\006 \001(\005\022\016\n\006u"
  "data2\030\007 \001(\005\022\016\n\006udata3\030\010 \001(\005\"N\n\017GetUGameI"
  "nfoRes\022\016\n\006status\030\001 \001(\005\022!\n\005uinfo\030\002 \001(\0132\r."
  "GetUGameInfoH\000\210\001\001B\010\n\006_uinfo\"#\n\021RecvLogin"
  "BonusRes\022\016\n\006status\030\001 \001(\005\"^\n\016WorldRankUch"
  "ip\022\r\n\005unick\030\001 \001(\t\022\014\n\004usex\030\002 \001(\005\022\022\n\nusysa"
  "vatar\030\003 \001(\005\022\014\n\004uvip\030\004 \001(\005\022\r\n\005uchip\030\005 \001(\005"
  "\"J\n\024GetWorldRankUchipRes\022\016\n\006status\030\001 \001(\005"
  "\022\"\n\trank_info\030\002 \003(\0132\017.WorldRankUchip\"\037\n\014"
  "GetSysMsgReq\022\017\n\007ver_num\030\001 \001(\005\"A\n\014GetSysM"
  "sgRes\022\016\n\006status\030\001 \001(\005\022\017\n\007ver_num\030\002 \001(\005\022\020"
  "\n\010sys_msgs\030\003 \003(\t\"\037\n\rLogicLoginRes\022\016\n\006sta"
  "tus\030\001 \001(\005\"\033\n\014EnterZoneReq\022\013\n\003zid\030\001 \001(\005\"\036"
  "\n\014EnterZoneRes\022\016\n\006status\030\001 \001(\005\"f\n\023OnOthe"
  "rEnteredMatch\022\r\n\005unick\030\001 \001(\t\022\014\n\004usex\030\002 \001"
  "(\005\022\022\n\nusysavatar\030\003 \001(\005\022\016\n\006seatid\030\004 \001(\005\022\016"
  "\n\006teamid\030\005 \001(\005\"u\n\nEnterMatch\022\013\n\003zid\030\001 \001("
  "\005\022\017\n\007matchid\030\002 \001(\005\022\016\n\006seatid\030\003 \001(\005\022\016\n\006te"
  "amid\030\004 \001(\005\022)\n\013other_uinfo\030\005 \003(\0132\024.OnOthe"
  "rEnteredMatch\"\036\n\014QuitMatchRes\022\016\n\006status\030"
  "\001 \001(\005\"%\n\023OnOtherQuittedMatch\022\016\n\006seatid\030\001"
  " \001(\005\"D\n\rCharacterInfo\022\016\n\006teamid\030\001 \001(\005\022\016\n"
  "\006seatid\030\002 \001(\005\022\023\n\013characterid\030\003 \001(\005\"/\n\tGa"
  "meStart\022\"\n\ncharacters\030\001 \003(\0132\016.CharacterI"
  "nfo\"1\n\rLogicLoginReq\022\016\n\006udp_ip\030\001 \001(\t\022\020\n\010"
  "udp_port\030\002 \001(\005\"E\n\013OptionEvent\022\016\n\006seatid\030"
  "\001 \001(\005\022\020\n\010opt_type\030\002 \001(\005\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030"
  "\004 \001(\005\"8\n\tFrameOpts\022\017\n\007frameid\030\001 \001(\005\022\032\n\004o"
  "pts\030\002 \003(\0132\014.OptionEvent\"@\n\nLogicFrame\022\017\n"
  "\007frameid\030\001 \001(\005\022!\n\runsync_frames\030\002 \003(\0132\n."
  "FrameOpts\"i\n\014NextFrameOpt\022\017\n\007frameid\030\001 \001"
  "(\005\022\013\n\003zid\030\002 \001(\005\022\017\n\007matchid\030\003 \001(\005\022\016\n\006seat"
  "id\030\004 \001(\005\022\032\n\004opts\030\005 \003(\0132\014.OptionEvent\"(\n\017"
  "GameFinishedRes\022\025\n\rwinner_teamid\030\001 \001(\005*>"
  "\n\005Stype\022\021\n\rINVALID_STYPE\020\000\022\t\n\005eAuth\020\001\022\013\n"
  "\007eSystem\020\002\022\n\n\006eLogic\020\003*\317\005\n\003Cmd\022\017\n\013INVALI"
  "D_CMD\020\000\022\022\n\016eGuestLoginReq\020\001\022\022\n\016eGuestLog"
  "inRes\020\002\022\017\n\013eReloginRes\020\003\022\021\n\reUserLostCon"
  "n\020\004\022\023\n\017eEditProfileReq\020\005\022\023\n\017eEditProfile"
  "Res\020\006\022\024\n\020eGuestUpgradeReq\020\007\022\024\n\020eGuestUpg"
  "radeRes\020\010\022\021\n\reUserLoginReq\020\t\022\021\n\reUserLog"
  "inRes\020\n\022\016\n\neLogoutReq\020\013\022\016\n\neLogoutRes\020\014\022"
  "\024\n\020eGetUGameInfoReq\020\r\022\024\n\020eGetUGameInfoRe"
  "s\020\016\022\026\n\022eRecvLoginBonusReq\020\017\022\026\n\022eRecvLogi"
  "nBonusRes\020\020\022\031\n\025eGetWorldRankUchipReq\020\021\022\031"
  "\n\025eGetWorldRankUchipRes\020\022\022\021\n\reGetSysMsgR"
  "eq\020\023\022\021\n\reGetSysMsgRes\020\024\022\022\n\016eLogicLoginRe"
  "q\020\025\022\022\n\016eLogicLoginRes\020\026\022\021\n\reEnterZoneReq"
  "\020\027\022\021\n\reEnterZoneRes\020\030\022\017\n\013eEnterMatch\020\031\022\030"
  "\n\024eOnOtherEnteredMatch\020\032\022\021\n\reQuitMatchRe"
  "q\020\033\022\021\n\reQuitMatchRes\020\034\022\030\n\024eOnOtherQuitte"
  "dMatch\020\035\022\016\n\neGameStart\020\036\022\017\n\013eLogicFrame\020"
  "\037\022\021\n\reNextFrameOpt\020 \022\024\n\020eGameFinishedReq"
  "\020!\022\024\n\020eGameFinishedRes\020\"b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_game_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_game_2eproto = {
    false, false, 2792, descriptor_table_protodef_game_2eproto,
    "game.proto",
    &descriptor_table_game_2eproto_once, nullptr, 0, 32,
    schemas, file_default_instances, TableStruct_game_2eproto::offsets,
    file_level_metadata_game_2eproto, file_level_enum_descriptors_game_2eproto,
    file_level_service_descriptors_game_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_game_2eproto_getter() {
  return &descriptor_table_game_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_game_2eproto(&descriptor_table_game_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Stype_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[0];
}
bool Stype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[1];
}
bool Cmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GuestLoginReq::_Internal {
 public:
};

GuestLoginReq::GuestLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GuestLoginReq)
}
GuestLoginReq::GuestLoginReq(const GuestLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuestLoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guest_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.guest_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guest_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guest_key().empty()) {
    _this->_impl_.guest_key_.Set(from._internal_guest_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GuestLoginReq)
}

inline void GuestLoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guest_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.guest_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guest_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GuestLoginReq::~GuestLoginReq() {
  // @@protoc_insertion_point(destructor:GuestLoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuestLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.guest_key_.Destroy();
}

void GuestLoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuestLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GuestLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guest_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuestLoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string guest_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guest_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GuestLoginReq.guest_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuestLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GuestLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string guest_key = 1;
  if (!this->_internal_guest_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guest_key().data(), static_cast<int>(this->_internal_guest_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GuestLoginReq.guest_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guest_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GuestLoginReq)
  return target;
}

size_t GuestLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GuestLoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string guest_key = 1;
  if (!this->_internal_guest_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guest_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuestLoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuestLoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuestLoginReq::GetClassData() const { return &_class_data_; }


void GuestLoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuestLoginReq*>(&to_msg);
  auto& from = static_cast<const GuestLoginReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GuestLoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_guest_key().empty()) {
    _this->_internal_set_guest_key(from._internal_guest_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuestLoginReq::CopyFrom(const GuestLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GuestLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuestLoginReq::IsInitialized() const {
  return true;
}

void GuestLoginReq::InternalSwap(GuestLoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guest_key_, lhs_arena,
      &other->_impl_.guest_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GuestLoginReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[0]);
}

// ===================================================================

class UserLoginReq::_Internal {
 public:
};

UserLoginReq::UserLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserLoginReq)
}
UserLoginReq::UserLoginReq(const UserLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uname_){}
    , decltype(_impl_.upwd_md5_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uname().empty()) {
    _this->_impl_.uname_.Set(from._internal_uname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.upwd_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upwd_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_upwd_md5().empty()) {
    _this->_impl_.upwd_md5_.Set(from._internal_upwd_md5(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UserLoginReq)
}

inline void UserLoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uname_){}
    , decltype(_impl_.upwd_md5_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.upwd_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upwd_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserLoginReq::~UserLoginReq() {
  // @@protoc_insertion_point(destructor:UserLoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uname_.Destroy();
  _impl_.upwd_md5_.Destroy();
}

void UserLoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:UserLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uname_.ClearToEmpty();
  _impl_.upwd_md5_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UserLoginReq.uname"));
        } else
          goto handle_unusual;
        continue;
      // string upwd_md5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_upwd_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UserLoginReq.upwd_md5"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uname = 1;
  if (!this->_internal_uname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uname().data(), static_cast<int>(this->_internal_uname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserLoginReq.uname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uname(), target);
  }

  // string upwd_md5 = 2;
  if (!this->_internal_upwd_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_upwd_md5().data(), static_cast<int>(this->_internal_upwd_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserLoginReq.upwd_md5");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_upwd_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserLoginReq)
  return target;
}

size_t UserLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserLoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uname = 1;
  if (!this->_internal_uname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uname());
  }

  // string upwd_md5 = 2;
  if (!this->_internal_upwd_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upwd_md5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLoginReq::GetClassData() const { return &_class_data_; }


void UserLoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLoginReq*>(&to_msg);
  auto& from = static_cast<const UserLoginReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserLoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uname().empty()) {
    _this->_internal_set_uname(from._internal_uname());
  }
  if (!from._internal_upwd_md5().empty()) {
    _this->_internal_set_upwd_md5(from._internal_upwd_md5());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLoginReq::CopyFrom(const UserLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginReq::IsInitialized() const {
  return true;
}

void UserLoginReq::InternalSwap(UserLoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uname_, lhs_arena,
      &other->_impl_.uname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.upwd_md5_, lhs_arena,
      &other->_impl_.upwd_md5_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLoginReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[1]);
}

// ===================================================================

class UserCenterInfo::_Internal {
 public:
};

UserCenterInfo::UserCenterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserCenterInfo)
}
UserCenterInfo::UserCenterInfo(const UserCenterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserCenterInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.usex_){}
    , decltype(_impl_.usysavatar_){}
    , decltype(_impl_.uvip_){}
    , decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unick().empty()) {
    _this->_impl_.unick_.Set(from._internal_unick(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.usex_, &from._impl_.usex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.uid_) -
    reinterpret_cast<char*>(&_impl_.usex_)) + sizeof(_impl_.uid_));
  // @@protoc_insertion_point(copy_constructor:UserCenterInfo)
}

inline void UserCenterInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.usex_){0}
    , decltype(_impl_.usysavatar_){0}
    , decltype(_impl_.uvip_){0}
    , decltype(_impl_.uid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserCenterInfo::~UserCenterInfo() {
  // @@protoc_insertion_point(destructor:UserCenterInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserCenterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unick_.Destroy();
}

void UserCenterInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserCenterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:UserCenterInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unick_.ClearToEmpty();
  ::memset(&_impl_.usex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.uid_) -
      reinterpret_cast<char*>(&_impl_.usex_)) + sizeof(_impl_.uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserCenterInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unick();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UserCenterInfo.unick"));
        } else
          goto handle_unusual;
        continue;
      // int32 usex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.usex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 usysavatar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.usysavatar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uvip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.uvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserCenterInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserCenterInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unick().data(), static_cast<int>(this->_internal_unick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserCenterInfo.unick");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unick(), target);
  }

  // int32 usex = 2;
  if (this->_internal_usex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_usex(), target);
  }

  // int32 usysavatar = 3;
  if (this->_internal_usysavatar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_usysavatar(), target);
  }

  // int32 uvip = 4;
  if (this->_internal_uvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_uvip(), target);
  }

  // int32 uid = 5;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserCenterInfo)
  return target;
}

size_t UserCenterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserCenterInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unick());
  }

  // int32 usex = 2;
  if (this->_internal_usex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usex());
  }

  // int32 usysavatar = 3;
  if (this->_internal_usysavatar() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usysavatar());
  }

  // int32 uvip = 4;
  if (this->_internal_uvip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uvip());
  }

  // int32 uid = 5;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserCenterInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserCenterInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserCenterInfo::GetClassData() const { return &_class_data_; }


void UserCenterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserCenterInfo*>(&to_msg);
  auto& from = static_cast<const UserCenterInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserCenterInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unick().empty()) {
    _this->_internal_set_unick(from._internal_unick());
  }
  if (from._internal_usex() != 0) {
    _this->_internal_set_usex(from._internal_usex());
  }
  if (from._internal_usysavatar() != 0) {
    _this->_internal_set_usysavatar(from._internal_usysavatar());
  }
  if (from._internal_uvip() != 0) {
    _this->_internal_set_uvip(from._internal_uvip());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserCenterInfo::CopyFrom(const UserCenterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserCenterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCenterInfo::IsInitialized() const {
  return true;
}

void UserCenterInfo::InternalSwap(UserCenterInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unick_, lhs_arena,
      &other->_impl_.unick_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserCenterInfo, _impl_.uid_)
      + sizeof(UserCenterInfo::_impl_.uid_)
      - PROTOBUF_FIELD_OFFSET(UserCenterInfo, _impl_.usex_)>(
          reinterpret_cast<char*>(&_impl_.usex_),
          reinterpret_cast<char*>(&other->_impl_.usex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserCenterInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[2]);
}

// ===================================================================

class GuestLoginRes::_Internal {
 public:
  using HasBits = decltype(std::declval<GuestLoginRes>()._impl_._has_bits_);
  static const ::UserCenterInfo& uinfo(const GuestLoginRes* msg);
  static void set_has_uinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::UserCenterInfo&
GuestLoginRes::_Internal::uinfo(const GuestLoginRes* msg) {
  return *msg->_impl_.uinfo_;
}
GuestLoginRes::GuestLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GuestLoginRes)
}
GuestLoginRes::GuestLoginRes(const GuestLoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuestLoginRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uinfo_){nullptr}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uinfo()) {
    _this->_impl_.uinfo_ = new ::UserCenterInfo(*from._impl_.uinfo_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:GuestLoginRes)
}

inline void GuestLoginRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uinfo_){nullptr}
    , decltype(_impl_.status_){0}
  };
}

GuestLoginRes::~GuestLoginRes() {
  // @@protoc_insertion_point(destructor:GuestLoginRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuestLoginRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.uinfo_;
}

void GuestLoginRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuestLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:GuestLoginRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.uinfo_ != nullptr);
    _impl_.uinfo_->Clear();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuestLoginRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .UserCenterInfo uinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuestLoginRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GuestLoginRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // optional .UserCenterInfo uinfo = 2;
  if (_internal_has_uinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uinfo(this),
        _Internal::uinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GuestLoginRes)
  return target;
}

size_t GuestLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GuestLoginRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .UserCenterInfo uinfo = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uinfo_);
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuestLoginRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuestLoginRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuestLoginRes::GetClassData() const { return &_class_data_; }


void GuestLoginRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuestLoginRes*>(&to_msg);
  auto& from = static_cast<const GuestLoginRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GuestLoginRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uinfo()) {
    _this->_internal_mutable_uinfo()->::UserCenterInfo::MergeFrom(
        from._internal_uinfo());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuestLoginRes::CopyFrom(const GuestLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GuestLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuestLoginRes::IsInitialized() const {
  return true;
}

void GuestLoginRes::InternalSwap(GuestLoginRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuestLoginRes, _impl_.status_)
      + sizeof(GuestLoginRes::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(GuestLoginRes, _impl_.uinfo_)>(
          reinterpret_cast<char*>(&_impl_.uinfo_),
          reinterpret_cast<char*>(&other->_impl_.uinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuestLoginRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[3]);
}

// ===================================================================

class UserLoginRes::_Internal {
 public:
  using HasBits = decltype(std::declval<UserLoginRes>()._impl_._has_bits_);
  static const ::UserCenterInfo& uinfo(const UserLoginRes* msg);
  static void set_has_uinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::UserCenterInfo&
UserLoginRes::_Internal::uinfo(const UserLoginRes* msg) {
  return *msg->_impl_.uinfo_;
}
UserLoginRes::UserLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserLoginRes)
}
UserLoginRes::UserLoginRes(const UserLoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLoginRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uinfo_){nullptr}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uinfo()) {
    _this->_impl_.uinfo_ = new ::UserCenterInfo(*from._impl_.uinfo_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:UserLoginRes)
}

inline void UserLoginRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uinfo_){nullptr}
    , decltype(_impl_.status_){0}
  };
}

UserLoginRes::~UserLoginRes() {
  // @@protoc_insertion_point(destructor:UserLoginRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLoginRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.uinfo_;
}

void UserLoginRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:UserLoginRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.uinfo_ != nullptr);
    _impl_.uinfo_->Clear();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLoginRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .UserCenterInfo uinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLoginRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserLoginRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // optional .UserCenterInfo uinfo = 2;
  if (_internal_has_uinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uinfo(this),
        _Internal::uinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserLoginRes)
  return target;
}

size_t UserLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserLoginRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .UserCenterInfo uinfo = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uinfo_);
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLoginRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLoginRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLoginRes::GetClassData() const { return &_class_data_; }


void UserLoginRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLoginRes*>(&to_msg);
  auto& from = static_cast<const UserLoginRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserLoginRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uinfo()) {
    _this->_internal_mutable_uinfo()->::UserCenterInfo::MergeFrom(
        from._internal_uinfo());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLoginRes::CopyFrom(const UserLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginRes::IsInitialized() const {
  return true;
}

void UserLoginRes::InternalSwap(UserLoginRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserLoginRes, _impl_.status_)
      + sizeof(UserLoginRes::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(UserLoginRes, _impl_.uinfo_)>(
          reinterpret_cast<char*>(&_impl_.uinfo_),
          reinterpret_cast<char*>(&other->_impl_.uinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLoginRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[4]);
}

// ===================================================================

class EditProfileReq::_Internal {
 public:
};

EditProfileReq::EditProfileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EditProfileReq)
}
EditProfileReq::EditProfileReq(const EditProfileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditProfileReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.usex_){}
    , decltype(_impl_.usysavatar_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unick().empty()) {
    _this->_impl_.unick_.Set(from._internal_unick(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.usex_, &from._impl_.usex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usysavatar_) -
    reinterpret_cast<char*>(&_impl_.usex_)) + sizeof(_impl_.usysavatar_));
  // @@protoc_insertion_point(copy_constructor:EditProfileReq)
}

inline void EditProfileReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.usex_){0}
    , decltype(_impl_.usysavatar_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EditProfileReq::~EditProfileReq() {
  // @@protoc_insertion_point(destructor:EditProfileReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditProfileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unick_.Destroy();
}

void EditProfileReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditProfileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:EditProfileReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unick_.ClearToEmpty();
  ::memset(&_impl_.usex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.usysavatar_) -
      reinterpret_cast<char*>(&_impl_.usex_)) + sizeof(_impl_.usysavatar_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditProfileReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unick();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EditProfileReq.unick"));
        } else
          goto handle_unusual;
        continue;
      // int32 usex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.usex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 usysavatar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.usysavatar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EditProfileReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EditProfileReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unick().data(), static_cast<int>(this->_internal_unick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EditProfileReq.unick");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unick(), target);
  }

  // int32 usex = 2;
  if (this->_internal_usex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_usex(), target);
  }

  // int32 usysavatar = 3;
  if (this->_internal_usysavatar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_usysavatar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EditProfileReq)
  return target;
}

size_t EditProfileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EditProfileReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unick());
  }

  // int32 usex = 2;
  if (this->_internal_usex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usex());
  }

  // int32 usysavatar = 3;
  if (this->_internal_usysavatar() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usysavatar());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditProfileReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditProfileReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditProfileReq::GetClassData() const { return &_class_data_; }


void EditProfileReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditProfileReq*>(&to_msg);
  auto& from = static_cast<const EditProfileReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EditProfileReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unick().empty()) {
    _this->_internal_set_unick(from._internal_unick());
  }
  if (from._internal_usex() != 0) {
    _this->_internal_set_usex(from._internal_usex());
  }
  if (from._internal_usysavatar() != 0) {
    _this->_internal_set_usysavatar(from._internal_usysavatar());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditProfileReq::CopyFrom(const EditProfileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EditProfileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditProfileReq::IsInitialized() const {
  return true;
}

void EditProfileReq::InternalSwap(EditProfileReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unick_, lhs_arena,
      &other->_impl_.unick_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EditProfileReq, _impl_.usysavatar_)
      + sizeof(EditProfileReq::_impl_.usysavatar_)
      - PROTOBUF_FIELD_OFFSET(EditProfileReq, _impl_.usex_)>(
          reinterpret_cast<char*>(&_impl_.usex_),
          reinterpret_cast<char*>(&other->_impl_.usex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EditProfileReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[5]);
}

// ===================================================================

class EditProfileRes::_Internal {
 public:
};

EditProfileRes::EditProfileRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EditProfileRes)
}
EditProfileRes::EditProfileRes(const EditProfileRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditProfileRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:EditProfileRes)
}

inline void EditProfileRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EditProfileRes::~EditProfileRes() {
  // @@protoc_insertion_point(destructor:EditProfileRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditProfileRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EditProfileRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditProfileRes::Clear() {
// @@protoc_insertion_point(message_clear_start:EditProfileRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditProfileRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EditProfileRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EditProfileRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EditProfileRes)
  return target;
}

size_t EditProfileRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EditProfileRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditProfileRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditProfileRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditProfileRes::GetClassData() const { return &_class_data_; }


void EditProfileRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditProfileRes*>(&to_msg);
  auto& from = static_cast<const EditProfileRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EditProfileRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditProfileRes::CopyFrom(const EditProfileRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EditProfileRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditProfileRes::IsInitialized() const {
  return true;
}

void EditProfileRes::InternalSwap(EditProfileRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditProfileRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[6]);
}

// ===================================================================

class GuestUpgradeReq::_Internal {
 public:
};

GuestUpgradeReq::GuestUpgradeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GuestUpgradeReq)
}
GuestUpgradeReq::GuestUpgradeReq(const GuestUpgradeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuestUpgradeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uname_){}
    , decltype(_impl_.upwd_md5_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uname().empty()) {
    _this->_impl_.uname_.Set(from._internal_uname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.upwd_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upwd_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_upwd_md5().empty()) {
    _this->_impl_.upwd_md5_.Set(from._internal_upwd_md5(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GuestUpgradeReq)
}

inline void GuestUpgradeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uname_){}
    , decltype(_impl_.upwd_md5_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.upwd_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upwd_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GuestUpgradeReq::~GuestUpgradeReq() {
  // @@protoc_insertion_point(destructor:GuestUpgradeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuestUpgradeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uname_.Destroy();
  _impl_.upwd_md5_.Destroy();
}

void GuestUpgradeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuestUpgradeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GuestUpgradeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uname_.ClearToEmpty();
  _impl_.upwd_md5_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuestUpgradeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GuestUpgradeReq.uname"));
        } else
          goto handle_unusual;
        continue;
      // string upwd_md5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_upwd_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GuestUpgradeReq.upwd_md5"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuestUpgradeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GuestUpgradeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uname = 1;
  if (!this->_internal_uname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uname().data(), static_cast<int>(this->_internal_uname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GuestUpgradeReq.uname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uname(), target);
  }

  // string upwd_md5 = 2;
  if (!this->_internal_upwd_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_upwd_md5().data(), static_cast<int>(this->_internal_upwd_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GuestUpgradeReq.upwd_md5");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_upwd_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GuestUpgradeReq)
  return target;
}

size_t GuestUpgradeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GuestUpgradeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uname = 1;
  if (!this->_internal_uname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uname());
  }

  // string upwd_md5 = 2;
  if (!this->_internal_upwd_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upwd_md5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuestUpgradeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuestUpgradeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuestUpgradeReq::GetClassData() const { return &_class_data_; }


void GuestUpgradeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuestUpgradeReq*>(&to_msg);
  auto& from = static_cast<const GuestUpgradeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GuestUpgradeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uname().empty()) {
    _this->_internal_set_uname(from._internal_uname());
  }
  if (!from._internal_upwd_md5().empty()) {
    _this->_internal_set_upwd_md5(from._internal_upwd_md5());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuestUpgradeReq::CopyFrom(const GuestUpgradeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GuestUpgradeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuestUpgradeReq::IsInitialized() const {
  return true;
}

void GuestUpgradeReq::InternalSwap(GuestUpgradeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uname_, lhs_arena,
      &other->_impl_.uname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.upwd_md5_, lhs_arena,
      &other->_impl_.upwd_md5_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GuestUpgradeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[7]);
}

// ===================================================================

class GuestUpgradeRes::_Internal {
 public:
};

GuestUpgradeRes::GuestUpgradeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GuestUpgradeRes)
}
GuestUpgradeRes::GuestUpgradeRes(const GuestUpgradeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuestUpgradeRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:GuestUpgradeRes)
}

inline void GuestUpgradeRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GuestUpgradeRes::~GuestUpgradeRes() {
  // @@protoc_insertion_point(destructor:GuestUpgradeRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuestUpgradeRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GuestUpgradeRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuestUpgradeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:GuestUpgradeRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuestUpgradeRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuestUpgradeRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GuestUpgradeRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GuestUpgradeRes)
  return target;
}

size_t GuestUpgradeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GuestUpgradeRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuestUpgradeRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuestUpgradeRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuestUpgradeRes::GetClassData() const { return &_class_data_; }


void GuestUpgradeRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuestUpgradeRes*>(&to_msg);
  auto& from = static_cast<const GuestUpgradeRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GuestUpgradeRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuestUpgradeRes::CopyFrom(const GuestUpgradeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GuestUpgradeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuestUpgradeRes::IsInitialized() const {
  return true;
}

void GuestUpgradeRes::InternalSwap(GuestUpgradeRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuestUpgradeRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[8]);
}

// ===================================================================

class LogoutRes::_Internal {
 public:
};

LogoutRes::LogoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LogoutRes)
}
LogoutRes::LogoutRes(const LogoutRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogoutRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:LogoutRes)
}

inline void LogoutRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogoutRes::~LogoutRes() {
  // @@protoc_insertion_point(destructor:LogoutRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogoutRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogoutRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogoutRes::Clear() {
// @@protoc_insertion_point(message_clear_start:LogoutRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogoutRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogoutRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogoutRes)
  return target;
}

size_t LogoutRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogoutRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogoutRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogoutRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogoutRes::GetClassData() const { return &_class_data_; }


void LogoutRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogoutRes*>(&to_msg);
  auto& from = static_cast<const LogoutRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LogoutRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogoutRes::CopyFrom(const LogoutRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogoutRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRes::IsInitialized() const {
  return true;
}

void LogoutRes::InternalSwap(LogoutRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[9]);
}

// ===================================================================

class GetUGameInfo::_Internal {
 public:
};

GetUGameInfo::GetUGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetUGameInfo)
}
GetUGameInfo::GetUGameInfo(const GetUGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUGameInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uchip_){}
    , decltype(_impl_.uexp_){}
    , decltype(_impl_.uvip_){}
    , decltype(_impl_.uchip2_){}
    , decltype(_impl_.uchip3_){}
    , decltype(_impl_.udata1_){}
    , decltype(_impl_.udata2_){}
    , decltype(_impl_.udata3_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.uchip_, &from._impl_.uchip_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.udata3_) -
    reinterpret_cast<char*>(&_impl_.uchip_)) + sizeof(_impl_.udata3_));
  // @@protoc_insertion_point(copy_constructor:GetUGameInfo)
}

inline void GetUGameInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uchip_){0}
    , decltype(_impl_.uexp_){0}
    , decltype(_impl_.uvip_){0}
    , decltype(_impl_.uchip2_){0}
    , decltype(_impl_.uchip3_){0}
    , decltype(_impl_.udata1_){0}
    , decltype(_impl_.udata2_){0}
    , decltype(_impl_.udata3_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetUGameInfo::~GetUGameInfo() {
  // @@protoc_insertion_point(destructor:GetUGameInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUGameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetUGameInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GetUGameInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.uchip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.udata3_) -
      reinterpret_cast<char*>(&_impl_.uchip_)) + sizeof(_impl_.udata3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUGameInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uchip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uchip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uexp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.uexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uvip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.uvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uchip2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.uchip2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uchip3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.uchip3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 udata1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.udata1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 udata2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.udata2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 udata3 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.udata3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUGameInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetUGameInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uchip = 1;
  if (this->_internal_uchip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_uchip(), target);
  }

  // int32 uexp = 2;
  if (this->_internal_uexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_uexp(), target);
  }

  // int32 uvip = 3;
  if (this->_internal_uvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_uvip(), target);
  }

  // int32 uchip2 = 4;
  if (this->_internal_uchip2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_uchip2(), target);
  }

  // int32 uchip3 = 5;
  if (this->_internal_uchip3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_uchip3(), target);
  }

  // int32 udata1 = 6;
  if (this->_internal_udata1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_udata1(), target);
  }

  // int32 udata2 = 7;
  if (this->_internal_udata2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_udata2(), target);
  }

  // int32 udata3 = 8;
  if (this->_internal_udata3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_udata3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetUGameInfo)
  return target;
}

size_t GetUGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetUGameInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uchip = 1;
  if (this->_internal_uchip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uchip());
  }

  // int32 uexp = 2;
  if (this->_internal_uexp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uexp());
  }

  // int32 uvip = 3;
  if (this->_internal_uvip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uvip());
  }

  // int32 uchip2 = 4;
  if (this->_internal_uchip2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uchip2());
  }

  // int32 uchip3 = 5;
  if (this->_internal_uchip3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uchip3());
  }

  // int32 udata1 = 6;
  if (this->_internal_udata1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_udata1());
  }

  // int32 udata2 = 7;
  if (this->_internal_udata2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_udata2());
  }

  // int32 udata3 = 8;
  if (this->_internal_udata3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_udata3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUGameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUGameInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUGameInfo::GetClassData() const { return &_class_data_; }


void GetUGameInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUGameInfo*>(&to_msg);
  auto& from = static_cast<const GetUGameInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetUGameInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uchip() != 0) {
    _this->_internal_set_uchip(from._internal_uchip());
  }
  if (from._internal_uexp() != 0) {
    _this->_internal_set_uexp(from._internal_uexp());
  }
  if (from._internal_uvip() != 0) {
    _this->_internal_set_uvip(from._internal_uvip());
  }
  if (from._internal_uchip2() != 0) {
    _this->_internal_set_uchip2(from._internal_uchip2());
  }
  if (from._internal_uchip3() != 0) {
    _this->_internal_set_uchip3(from._internal_uchip3());
  }
  if (from._internal_udata1() != 0) {
    _this->_internal_set_udata1(from._internal_udata1());
  }
  if (from._internal_udata2() != 0) {
    _this->_internal_set_udata2(from._internal_udata2());
  }
  if (from._internal_udata3() != 0) {
    _this->_internal_set_udata3(from._internal_udata3());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUGameInfo::CopyFrom(const GetUGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetUGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUGameInfo::IsInitialized() const {
  return true;
}

void GetUGameInfo::InternalSwap(GetUGameInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUGameInfo, _impl_.udata3_)
      + sizeof(GetUGameInfo::_impl_.udata3_)
      - PROTOBUF_FIELD_OFFSET(GetUGameInfo, _impl_.uchip_)>(
          reinterpret_cast<char*>(&_impl_.uchip_),
          reinterpret_cast<char*>(&other->_impl_.uchip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUGameInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[10]);
}

// ===================================================================

class GetUGameInfoRes::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUGameInfoRes>()._impl_._has_bits_);
  static const ::GetUGameInfo& uinfo(const GetUGameInfoRes* msg);
  static void set_has_uinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::GetUGameInfo&
GetUGameInfoRes::_Internal::uinfo(const GetUGameInfoRes* msg) {
  return *msg->_impl_.uinfo_;
}
GetUGameInfoRes::GetUGameInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetUGameInfoRes)
}
GetUGameInfoRes::GetUGameInfoRes(const GetUGameInfoRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUGameInfoRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uinfo_){nullptr}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uinfo()) {
    _this->_impl_.uinfo_ = new ::GetUGameInfo(*from._impl_.uinfo_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:GetUGameInfoRes)
}

inline void GetUGameInfoRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uinfo_){nullptr}
    , decltype(_impl_.status_){0}
  };
}

GetUGameInfoRes::~GetUGameInfoRes() {
  // @@protoc_insertion_point(destructor:GetUGameInfoRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUGameInfoRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.uinfo_;
}

void GetUGameInfoRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUGameInfoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:GetUGameInfoRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.uinfo_ != nullptr);
    _impl_.uinfo_->Clear();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUGameInfoRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GetUGameInfo uinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUGameInfoRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetUGameInfoRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // optional .GetUGameInfo uinfo = 2;
  if (_internal_has_uinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uinfo(this),
        _Internal::uinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetUGameInfoRes)
  return target;
}

size_t GetUGameInfoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetUGameInfoRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .GetUGameInfo uinfo = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uinfo_);
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUGameInfoRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUGameInfoRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUGameInfoRes::GetClassData() const { return &_class_data_; }


void GetUGameInfoRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUGameInfoRes*>(&to_msg);
  auto& from = static_cast<const GetUGameInfoRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetUGameInfoRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uinfo()) {
    _this->_internal_mutable_uinfo()->::GetUGameInfo::MergeFrom(
        from._internal_uinfo());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUGameInfoRes::CopyFrom(const GetUGameInfoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetUGameInfoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUGameInfoRes::IsInitialized() const {
  return true;
}

void GetUGameInfoRes::InternalSwap(GetUGameInfoRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUGameInfoRes, _impl_.status_)
      + sizeof(GetUGameInfoRes::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(GetUGameInfoRes, _impl_.uinfo_)>(
          reinterpret_cast<char*>(&_impl_.uinfo_),
          reinterpret_cast<char*>(&other->_impl_.uinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUGameInfoRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[11]);
}

// ===================================================================

class RecvLoginBonusRes::_Internal {
 public:
};

RecvLoginBonusRes::RecvLoginBonusRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RecvLoginBonusRes)
}
RecvLoginBonusRes::RecvLoginBonusRes(const RecvLoginBonusRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecvLoginBonusRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:RecvLoginBonusRes)
}

inline void RecvLoginBonusRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecvLoginBonusRes::~RecvLoginBonusRes() {
  // @@protoc_insertion_point(destructor:RecvLoginBonusRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecvLoginBonusRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecvLoginBonusRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecvLoginBonusRes::Clear() {
// @@protoc_insertion_point(message_clear_start:RecvLoginBonusRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecvLoginBonusRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecvLoginBonusRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RecvLoginBonusRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RecvLoginBonusRes)
  return target;
}

size_t RecvLoginBonusRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RecvLoginBonusRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecvLoginBonusRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecvLoginBonusRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecvLoginBonusRes::GetClassData() const { return &_class_data_; }


void RecvLoginBonusRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecvLoginBonusRes*>(&to_msg);
  auto& from = static_cast<const RecvLoginBonusRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RecvLoginBonusRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecvLoginBonusRes::CopyFrom(const RecvLoginBonusRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RecvLoginBonusRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvLoginBonusRes::IsInitialized() const {
  return true;
}

void RecvLoginBonusRes::InternalSwap(RecvLoginBonusRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvLoginBonusRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[12]);
}

// ===================================================================

class WorldRankUchip::_Internal {
 public:
};

WorldRankUchip::WorldRankUchip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:WorldRankUchip)
}
WorldRankUchip::WorldRankUchip(const WorldRankUchip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorldRankUchip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.usex_){}
    , decltype(_impl_.usysavatar_){}
    , decltype(_impl_.uvip_){}
    , decltype(_impl_.uchip_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unick().empty()) {
    _this->_impl_.unick_.Set(from._internal_unick(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.usex_, &from._impl_.usex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.uchip_) -
    reinterpret_cast<char*>(&_impl_.usex_)) + sizeof(_impl_.uchip_));
  // @@protoc_insertion_point(copy_constructor:WorldRankUchip)
}

inline void WorldRankUchip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.usex_){0}
    , decltype(_impl_.usysavatar_){0}
    , decltype(_impl_.uvip_){0}
    , decltype(_impl_.uchip_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorldRankUchip::~WorldRankUchip() {
  // @@protoc_insertion_point(destructor:WorldRankUchip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorldRankUchip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unick_.Destroy();
}

void WorldRankUchip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorldRankUchip::Clear() {
// @@protoc_insertion_point(message_clear_start:WorldRankUchip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unick_.ClearToEmpty();
  ::memset(&_impl_.usex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.uchip_) -
      reinterpret_cast<char*>(&_impl_.usex_)) + sizeof(_impl_.uchip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorldRankUchip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unick();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WorldRankUchip.unick"));
        } else
          goto handle_unusual;
        continue;
      // int32 usex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.usex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 usysavatar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.usysavatar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uvip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.uvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uchip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.uchip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorldRankUchip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldRankUchip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unick().data(), static_cast<int>(this->_internal_unick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WorldRankUchip.unick");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unick(), target);
  }

  // int32 usex = 2;
  if (this->_internal_usex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_usex(), target);
  }

  // int32 usysavatar = 3;
  if (this->_internal_usysavatar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_usysavatar(), target);
  }

  // int32 uvip = 4;
  if (this->_internal_uvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_uvip(), target);
  }

  // int32 uchip = 5;
  if (this->_internal_uchip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_uchip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldRankUchip)
  return target;
}

size_t WorldRankUchip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorldRankUchip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unick());
  }

  // int32 usex = 2;
  if (this->_internal_usex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usex());
  }

  // int32 usysavatar = 3;
  if (this->_internal_usysavatar() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usysavatar());
  }

  // int32 uvip = 4;
  if (this->_internal_uvip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uvip());
  }

  // int32 uchip = 5;
  if (this->_internal_uchip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uchip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorldRankUchip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorldRankUchip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorldRankUchip::GetClassData() const { return &_class_data_; }


void WorldRankUchip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorldRankUchip*>(&to_msg);
  auto& from = static_cast<const WorldRankUchip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WorldRankUchip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unick().empty()) {
    _this->_internal_set_unick(from._internal_unick());
  }
  if (from._internal_usex() != 0) {
    _this->_internal_set_usex(from._internal_usex());
  }
  if (from._internal_usysavatar() != 0) {
    _this->_internal_set_usysavatar(from._internal_usysavatar());
  }
  if (from._internal_uvip() != 0) {
    _this->_internal_set_uvip(from._internal_uvip());
  }
  if (from._internal_uchip() != 0) {
    _this->_internal_set_uchip(from._internal_uchip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorldRankUchip::CopyFrom(const WorldRankUchip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorldRankUchip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldRankUchip::IsInitialized() const {
  return true;
}

void WorldRankUchip::InternalSwap(WorldRankUchip* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unick_, lhs_arena,
      &other->_impl_.unick_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorldRankUchip, _impl_.uchip_)
      + sizeof(WorldRankUchip::_impl_.uchip_)
      - PROTOBUF_FIELD_OFFSET(WorldRankUchip, _impl_.usex_)>(
          reinterpret_cast<char*>(&_impl_.usex_),
          reinterpret_cast<char*>(&other->_impl_.usex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldRankUchip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[13]);
}

// ===================================================================

class GetWorldRankUchipRes::_Internal {
 public:
};

GetWorldRankUchipRes::GetWorldRankUchipRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetWorldRankUchipRes)
}
GetWorldRankUchipRes::GetWorldRankUchipRes(const GetWorldRankUchipRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorldRankUchipRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_info_){from._impl_.rank_info_}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:GetWorldRankUchipRes)
}

inline void GetWorldRankUchipRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_info_){arena}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetWorldRankUchipRes::~GetWorldRankUchipRes() {
  // @@protoc_insertion_point(destructor:GetWorldRankUchipRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorldRankUchipRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rank_info_.~RepeatedPtrField();
}

void GetWorldRankUchipRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorldRankUchipRes::Clear() {
// @@protoc_insertion_point(message_clear_start:GetWorldRankUchipRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rank_info_.Clear();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorldRankUchipRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .WorldRankUchip rank_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rank_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWorldRankUchipRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetWorldRankUchipRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // repeated .WorldRankUchip rank_info = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rank_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_rank_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetWorldRankUchipRes)
  return target;
}

size_t GetWorldRankUchipRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetWorldRankUchipRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .WorldRankUchip rank_info = 2;
  total_size += 1UL * this->_internal_rank_info_size();
  for (const auto& msg : this->_impl_.rank_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorldRankUchipRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorldRankUchipRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorldRankUchipRes::GetClassData() const { return &_class_data_; }


void GetWorldRankUchipRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorldRankUchipRes*>(&to_msg);
  auto& from = static_cast<const GetWorldRankUchipRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetWorldRankUchipRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rank_info_.MergeFrom(from._impl_.rank_info_);
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorldRankUchipRes::CopyFrom(const GetWorldRankUchipRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetWorldRankUchipRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorldRankUchipRes::IsInitialized() const {
  return true;
}

void GetWorldRankUchipRes::InternalSwap(GetWorldRankUchipRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rank_info_.InternalSwap(&other->_impl_.rank_info_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorldRankUchipRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[14]);
}

// ===================================================================

class GetSysMsgReq::_Internal {
 public:
};

GetSysMsgReq::GetSysMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetSysMsgReq)
}
GetSysMsgReq::GetSysMsgReq(const GetSysMsgReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSysMsgReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ver_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ver_num_ = from._impl_.ver_num_;
  // @@protoc_insertion_point(copy_constructor:GetSysMsgReq)
}

inline void GetSysMsgReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ver_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSysMsgReq::~GetSysMsgReq() {
  // @@protoc_insertion_point(destructor:GetSysMsgReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSysMsgReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSysMsgReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSysMsgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GetSysMsgReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ver_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSysMsgReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ver_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ver_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSysMsgReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetSysMsgReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ver_num = 1;
  if (this->_internal_ver_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ver_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetSysMsgReq)
  return target;
}

size_t GetSysMsgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetSysMsgReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ver_num = 1;
  if (this->_internal_ver_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ver_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSysMsgReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSysMsgReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSysMsgReq::GetClassData() const { return &_class_data_; }


void GetSysMsgReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSysMsgReq*>(&to_msg);
  auto& from = static_cast<const GetSysMsgReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetSysMsgReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ver_num() != 0) {
    _this->_internal_set_ver_num(from._internal_ver_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSysMsgReq::CopyFrom(const GetSysMsgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetSysMsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSysMsgReq::IsInitialized() const {
  return true;
}

void GetSysMsgReq::InternalSwap(GetSysMsgReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ver_num_, other->_impl_.ver_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSysMsgReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[15]);
}

// ===================================================================

class GetSysMsgRes::_Internal {
 public:
};

GetSysMsgRes::GetSysMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetSysMsgRes)
}
GetSysMsgRes::GetSysMsgRes(const GetSysMsgRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSysMsgRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sys_msgs_){from._impl_.sys_msgs_}
    , decltype(_impl_.status_){}
    , decltype(_impl_.ver_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ver_num_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.ver_num_));
  // @@protoc_insertion_point(copy_constructor:GetSysMsgRes)
}

inline void GetSysMsgRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sys_msgs_){arena}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.ver_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSysMsgRes::~GetSysMsgRes() {
  // @@protoc_insertion_point(destructor:GetSysMsgRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSysMsgRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sys_msgs_.~RepeatedPtrField();
}

void GetSysMsgRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSysMsgRes::Clear() {
// @@protoc_insertion_point(message_clear_start:GetSysMsgRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sys_msgs_.Clear();
  ::memset(&_impl_.status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ver_num_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.ver_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSysMsgRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ver_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ver_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string sys_msgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sys_msgs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "GetSysMsgRes.sys_msgs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSysMsgRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetSysMsgRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // int32 ver_num = 2;
  if (this->_internal_ver_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ver_num(), target);
  }

  // repeated string sys_msgs = 3;
  for (int i = 0, n = this->_internal_sys_msgs_size(); i < n; i++) {
    const auto& s = this->_internal_sys_msgs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSysMsgRes.sys_msgs");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetSysMsgRes)
  return target;
}

size_t GetSysMsgRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetSysMsgRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sys_msgs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.sys_msgs_.size());
  for (int i = 0, n = _impl_.sys_msgs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.sys_msgs_.Get(i));
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  // int32 ver_num = 2;
  if (this->_internal_ver_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ver_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSysMsgRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSysMsgRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSysMsgRes::GetClassData() const { return &_class_data_; }


void GetSysMsgRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSysMsgRes*>(&to_msg);
  auto& from = static_cast<const GetSysMsgRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetSysMsgRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sys_msgs_.MergeFrom(from._impl_.sys_msgs_);
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_ver_num() != 0) {
    _this->_internal_set_ver_num(from._internal_ver_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSysMsgRes::CopyFrom(const GetSysMsgRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetSysMsgRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSysMsgRes::IsInitialized() const {
  return true;
}

void GetSysMsgRes::InternalSwap(GetSysMsgRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sys_msgs_.InternalSwap(&other->_impl_.sys_msgs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSysMsgRes, _impl_.ver_num_)
      + sizeof(GetSysMsgRes::_impl_.ver_num_)
      - PROTOBUF_FIELD_OFFSET(GetSysMsgRes, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSysMsgRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[16]);
}

// ===================================================================

class LogicLoginRes::_Internal {
 public:
};

LogicLoginRes::LogicLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LogicLoginRes)
}
LogicLoginRes::LogicLoginRes(const LogicLoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicLoginRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:LogicLoginRes)
}

inline void LogicLoginRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogicLoginRes::~LogicLoginRes() {
  // @@protoc_insertion_point(destructor:LogicLoginRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicLoginRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogicLoginRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicLoginRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicLoginRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicLoginRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicLoginRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicLoginRes)
  return target;
}

size_t LogicLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicLoginRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicLoginRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicLoginRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicLoginRes::GetClassData() const { return &_class_data_; }


void LogicLoginRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicLoginRes*>(&to_msg);
  auto& from = static_cast<const LogicLoginRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LogicLoginRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicLoginRes::CopyFrom(const LogicLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicLoginRes::IsInitialized() const {
  return true;
}

void LogicLoginRes::InternalSwap(LogicLoginRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicLoginRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[17]);
}

// ===================================================================

class EnterZoneReq::_Internal {
 public:
};

EnterZoneReq::EnterZoneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EnterZoneReq)
}
EnterZoneReq::EnterZoneReq(const EnterZoneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnterZoneReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.zid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.zid_ = from._impl_.zid_;
  // @@protoc_insertion_point(copy_constructor:EnterZoneReq)
}

inline void EnterZoneReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.zid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnterZoneReq::~EnterZoneReq() {
  // @@protoc_insertion_point(destructor:EnterZoneReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnterZoneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnterZoneReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnterZoneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:EnterZoneReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterZoneReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 zid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterZoneReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnterZoneReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 zid = 1;
  if (this->_internal_zid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_zid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnterZoneReq)
  return target;
}

size_t EnterZoneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnterZoneReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 zid = 1;
  if (this->_internal_zid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterZoneReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnterZoneReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterZoneReq::GetClassData() const { return &_class_data_; }


void EnterZoneReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnterZoneReq*>(&to_msg);
  auto& from = static_cast<const EnterZoneReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EnterZoneReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_zid() != 0) {
    _this->_internal_set_zid(from._internal_zid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterZoneReq::CopyFrom(const EnterZoneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnterZoneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterZoneReq::IsInitialized() const {
  return true;
}

void EnterZoneReq::InternalSwap(EnterZoneReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.zid_, other->_impl_.zid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterZoneReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[18]);
}

// ===================================================================

class EnterZoneRes::_Internal {
 public:
};

EnterZoneRes::EnterZoneRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EnterZoneRes)
}
EnterZoneRes::EnterZoneRes(const EnterZoneRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnterZoneRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:EnterZoneRes)
}

inline void EnterZoneRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnterZoneRes::~EnterZoneRes() {
  // @@protoc_insertion_point(destructor:EnterZoneRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnterZoneRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnterZoneRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnterZoneRes::Clear() {
// @@protoc_insertion_point(message_clear_start:EnterZoneRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterZoneRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterZoneRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnterZoneRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnterZoneRes)
  return target;
}

size_t EnterZoneRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnterZoneRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterZoneRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnterZoneRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterZoneRes::GetClassData() const { return &_class_data_; }


void EnterZoneRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnterZoneRes*>(&to_msg);
  auto& from = static_cast<const EnterZoneRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EnterZoneRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterZoneRes::CopyFrom(const EnterZoneRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnterZoneRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterZoneRes::IsInitialized() const {
  return true;
}

void EnterZoneRes::InternalSwap(EnterZoneRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterZoneRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[19]);
}

// ===================================================================

class OnOtherEnteredMatch::_Internal {
 public:
};

OnOtherEnteredMatch::OnOtherEnteredMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OnOtherEnteredMatch)
}
OnOtherEnteredMatch::OnOtherEnteredMatch(const OnOtherEnteredMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OnOtherEnteredMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.usex_){}
    , decltype(_impl_.usysavatar_){}
    , decltype(_impl_.seatid_){}
    , decltype(_impl_.teamid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unick().empty()) {
    _this->_impl_.unick_.Set(from._internal_unick(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.usex_, &from._impl_.usex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.teamid_) -
    reinterpret_cast<char*>(&_impl_.usex_)) + sizeof(_impl_.teamid_));
  // @@protoc_insertion_point(copy_constructor:OnOtherEnteredMatch)
}

inline void OnOtherEnteredMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unick_){}
    , decltype(_impl_.usex_){0}
    , decltype(_impl_.usysavatar_){0}
    , decltype(_impl_.seatid_){0}
    , decltype(_impl_.teamid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OnOtherEnteredMatch::~OnOtherEnteredMatch() {
  // @@protoc_insertion_point(destructor:OnOtherEnteredMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OnOtherEnteredMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unick_.Destroy();
}

void OnOtherEnteredMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OnOtherEnteredMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:OnOtherEnteredMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unick_.ClearToEmpty();
  ::memset(&_impl_.usex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.teamid_) -
      reinterpret_cast<char*>(&_impl_.usex_)) + sizeof(_impl_.teamid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnOtherEnteredMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unick();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "OnOtherEnteredMatch.unick"));
        } else
          goto handle_unusual;
        continue;
      // int32 usex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.usex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 usysavatar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.usysavatar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seatid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.seatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 teamid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnOtherEnteredMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OnOtherEnteredMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unick().data(), static_cast<int>(this->_internal_unick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OnOtherEnteredMatch.unick");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unick(), target);
  }

  // int32 usex = 2;
  if (this->_internal_usex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_usex(), target);
  }

  // int32 usysavatar = 3;
  if (this->_internal_usysavatar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_usysavatar(), target);
  }

  // int32 seatid = 4;
  if (this->_internal_seatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_seatid(), target);
  }

  // int32 teamid = 5;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_teamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OnOtherEnteredMatch)
  return target;
}

size_t OnOtherEnteredMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OnOtherEnteredMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unick = 1;
  if (!this->_internal_unick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unick());
  }

  // int32 usex = 2;
  if (this->_internal_usex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usex());
  }

  // int32 usysavatar = 3;
  if (this->_internal_usysavatar() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usysavatar());
  }

  // int32 seatid = 4;
  if (this->_internal_seatid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seatid());
  }

  // int32 teamid = 5;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_teamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnOtherEnteredMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OnOtherEnteredMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnOtherEnteredMatch::GetClassData() const { return &_class_data_; }


void OnOtherEnteredMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OnOtherEnteredMatch*>(&to_msg);
  auto& from = static_cast<const OnOtherEnteredMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OnOtherEnteredMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unick().empty()) {
    _this->_internal_set_unick(from._internal_unick());
  }
  if (from._internal_usex() != 0) {
    _this->_internal_set_usex(from._internal_usex());
  }
  if (from._internal_usysavatar() != 0) {
    _this->_internal_set_usysavatar(from._internal_usysavatar());
  }
  if (from._internal_seatid() != 0) {
    _this->_internal_set_seatid(from._internal_seatid());
  }
  if (from._internal_teamid() != 0) {
    _this->_internal_set_teamid(from._internal_teamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnOtherEnteredMatch::CopyFrom(const OnOtherEnteredMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OnOtherEnteredMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnOtherEnteredMatch::IsInitialized() const {
  return true;
}

void OnOtherEnteredMatch::InternalSwap(OnOtherEnteredMatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unick_, lhs_arena,
      &other->_impl_.unick_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OnOtherEnteredMatch, _impl_.teamid_)
      + sizeof(OnOtherEnteredMatch::_impl_.teamid_)
      - PROTOBUF_FIELD_OFFSET(OnOtherEnteredMatch, _impl_.usex_)>(
          reinterpret_cast<char*>(&_impl_.usex_),
          reinterpret_cast<char*>(&other->_impl_.usex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OnOtherEnteredMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[20]);
}

// ===================================================================

class EnterMatch::_Internal {
 public:
};

EnterMatch::EnterMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EnterMatch)
}
EnterMatch::EnterMatch(const EnterMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnterMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.other_uinfo_){from._impl_.other_uinfo_}
    , decltype(_impl_.zid_){}
    , decltype(_impl_.matchid_){}
    , decltype(_impl_.seatid_){}
    , decltype(_impl_.teamid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.zid_, &from._impl_.zid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.teamid_) -
    reinterpret_cast<char*>(&_impl_.zid_)) + sizeof(_impl_.teamid_));
  // @@protoc_insertion_point(copy_constructor:EnterMatch)
}

inline void EnterMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.other_uinfo_){arena}
    , decltype(_impl_.zid_){0}
    , decltype(_impl_.matchid_){0}
    , decltype(_impl_.seatid_){0}
    , decltype(_impl_.teamid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnterMatch::~EnterMatch() {
  // @@protoc_insertion_point(destructor:EnterMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnterMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.other_uinfo_.~RepeatedPtrField();
}

void EnterMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnterMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:EnterMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.other_uinfo_.Clear();
  ::memset(&_impl_.zid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.teamid_) -
      reinterpret_cast<char*>(&_impl_.zid_)) + sizeof(_impl_.teamid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 zid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seatid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.seatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 teamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .OnOtherEnteredMatch other_uinfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_other_uinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnterMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 zid = 1;
  if (this->_internal_zid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_zid(), target);
  }

  // int32 matchid = 2;
  if (this->_internal_matchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_matchid(), target);
  }

  // int32 seatid = 3;
  if (this->_internal_seatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_seatid(), target);
  }

  // int32 teamid = 4;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_teamid(), target);
  }

  // repeated .OnOtherEnteredMatch other_uinfo = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_other_uinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_other_uinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnterMatch)
  return target;
}

size_t EnterMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnterMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OnOtherEnteredMatch other_uinfo = 5;
  total_size += 1UL * this->_internal_other_uinfo_size();
  for (const auto& msg : this->_impl_.other_uinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 zid = 1;
  if (this->_internal_zid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zid());
  }

  // int32 matchid = 2;
  if (this->_internal_matchid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_matchid());
  }

  // int32 seatid = 3;
  if (this->_internal_seatid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seatid());
  }

  // int32 teamid = 4;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_teamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnterMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterMatch::GetClassData() const { return &_class_data_; }


void EnterMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnterMatch*>(&to_msg);
  auto& from = static_cast<const EnterMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EnterMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.other_uinfo_.MergeFrom(from._impl_.other_uinfo_);
  if (from._internal_zid() != 0) {
    _this->_internal_set_zid(from._internal_zid());
  }
  if (from._internal_matchid() != 0) {
    _this->_internal_set_matchid(from._internal_matchid());
  }
  if (from._internal_seatid() != 0) {
    _this->_internal_set_seatid(from._internal_seatid());
  }
  if (from._internal_teamid() != 0) {
    _this->_internal_set_teamid(from._internal_teamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterMatch::CopyFrom(const EnterMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnterMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterMatch::IsInitialized() const {
  return true;
}

void EnterMatch::InternalSwap(EnterMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.other_uinfo_.InternalSwap(&other->_impl_.other_uinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterMatch, _impl_.teamid_)
      + sizeof(EnterMatch::_impl_.teamid_)
      - PROTOBUF_FIELD_OFFSET(EnterMatch, _impl_.zid_)>(
          reinterpret_cast<char*>(&_impl_.zid_),
          reinterpret_cast<char*>(&other->_impl_.zid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[21]);
}

// ===================================================================

class QuitMatchRes::_Internal {
 public:
};

QuitMatchRes::QuitMatchRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QuitMatchRes)
}
QuitMatchRes::QuitMatchRes(const QuitMatchRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuitMatchRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:QuitMatchRes)
}

inline void QuitMatchRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuitMatchRes::~QuitMatchRes() {
  // @@protoc_insertion_point(destructor:QuitMatchRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuitMatchRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QuitMatchRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuitMatchRes::Clear() {
// @@protoc_insertion_point(message_clear_start:QuitMatchRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuitMatchRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuitMatchRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuitMatchRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuitMatchRes)
  return target;
}

size_t QuitMatchRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QuitMatchRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuitMatchRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuitMatchRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuitMatchRes::GetClassData() const { return &_class_data_; }


void QuitMatchRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuitMatchRes*>(&to_msg);
  auto& from = static_cast<const QuitMatchRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:QuitMatchRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuitMatchRes::CopyFrom(const QuitMatchRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QuitMatchRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitMatchRes::IsInitialized() const {
  return true;
}

void QuitMatchRes::InternalSwap(QuitMatchRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitMatchRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[22]);
}

// ===================================================================

class OnOtherQuittedMatch::_Internal {
 public:
};

OnOtherQuittedMatch::OnOtherQuittedMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OnOtherQuittedMatch)
}
OnOtherQuittedMatch::OnOtherQuittedMatch(const OnOtherQuittedMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OnOtherQuittedMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seatid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.seatid_ = from._impl_.seatid_;
  // @@protoc_insertion_point(copy_constructor:OnOtherQuittedMatch)
}

inline void OnOtherQuittedMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seatid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OnOtherQuittedMatch::~OnOtherQuittedMatch() {
  // @@protoc_insertion_point(destructor:OnOtherQuittedMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OnOtherQuittedMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OnOtherQuittedMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OnOtherQuittedMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:OnOtherQuittedMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seatid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnOtherQuittedMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 seatid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.seatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnOtherQuittedMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OnOtherQuittedMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->_internal_seatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_seatid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OnOtherQuittedMatch)
  return target;
}

size_t OnOtherQuittedMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OnOtherQuittedMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->_internal_seatid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seatid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnOtherQuittedMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OnOtherQuittedMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnOtherQuittedMatch::GetClassData() const { return &_class_data_; }


void OnOtherQuittedMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OnOtherQuittedMatch*>(&to_msg);
  auto& from = static_cast<const OnOtherQuittedMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OnOtherQuittedMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seatid() != 0) {
    _this->_internal_set_seatid(from._internal_seatid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnOtherQuittedMatch::CopyFrom(const OnOtherQuittedMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OnOtherQuittedMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnOtherQuittedMatch::IsInitialized() const {
  return true;
}

void OnOtherQuittedMatch::InternalSwap(OnOtherQuittedMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.seatid_, other->_impl_.seatid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnOtherQuittedMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[23]);
}

// ===================================================================

class CharacterInfo::_Internal {
 public:
};

CharacterInfo::CharacterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CharacterInfo)
}
CharacterInfo::CharacterInfo(const CharacterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharacterInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.teamid_){}
    , decltype(_impl_.seatid_){}
    , decltype(_impl_.characterid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.teamid_, &from._impl_.teamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.characterid_) -
    reinterpret_cast<char*>(&_impl_.teamid_)) + sizeof(_impl_.characterid_));
  // @@protoc_insertion_point(copy_constructor:CharacterInfo)
}

inline void CharacterInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.teamid_){0}
    , decltype(_impl_.seatid_){0}
    , decltype(_impl_.characterid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CharacterInfo::~CharacterInfo() {
  // @@protoc_insertion_point(destructor:CharacterInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharacterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CharacterInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharacterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CharacterInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.teamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.characterid_) -
      reinterpret_cast<char*>(&_impl_.teamid_)) + sizeof(_impl_.characterid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 teamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seatid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 characterid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.characterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CharacterInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 teamid = 1;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_teamid(), target);
  }

  // int32 seatid = 2;
  if (this->_internal_seatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_seatid(), target);
  }

  // int32 characterid = 3;
  if (this->_internal_characterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_characterid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CharacterInfo)
  return target;
}

size_t CharacterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CharacterInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 teamid = 1;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_teamid());
  }

  // int32 seatid = 2;
  if (this->_internal_seatid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seatid());
  }

  // int32 characterid = 3;
  if (this->_internal_characterid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_characterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharacterInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterInfo::GetClassData() const { return &_class_data_; }


void CharacterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharacterInfo*>(&to_msg);
  auto& from = static_cast<const CharacterInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CharacterInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_teamid() != 0) {
    _this->_internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_seatid() != 0) {
    _this->_internal_set_seatid(from._internal_seatid());
  }
  if (from._internal_characterid() != 0) {
    _this->_internal_set_characterid(from._internal_characterid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterInfo::CopyFrom(const CharacterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CharacterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterInfo::IsInitialized() const {
  return true;
}

void CharacterInfo::InternalSwap(CharacterInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.characterid_)
      + sizeof(CharacterInfo::_impl_.characterid_)
      - PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.teamid_)>(
          reinterpret_cast<char*>(&_impl_.teamid_),
          reinterpret_cast<char*>(&other->_impl_.teamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[24]);
}

// ===================================================================

class GameStart::_Internal {
 public:
};

GameStart::GameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameStart)
}
GameStart::GameStart(const GameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.characters_){from._impl_.characters_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameStart)
}

inline void GameStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.characters_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameStart::~GameStart() {
  // @@protoc_insertion_point(destructor:GameStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.characters_.~RepeatedPtrField();
}

void GameStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.characters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CharacterInfo characters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CharacterInfo characters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_characters_size()); i < n; i++) {
    const auto& repfield = this->_internal_characters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStart)
  return target;
}

size_t GameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CharacterInfo characters = 1;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->_impl_.characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStart::GetClassData() const { return &_class_data_; }


void GameStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameStart*>(&to_msg);
  auto& from = static_cast<const GameStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.characters_.MergeFrom(from._impl_.characters_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStart::CopyFrom(const GameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStart::IsInitialized() const {
  return true;
}

void GameStart::InternalSwap(GameStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.characters_.InternalSwap(&other->_impl_.characters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[25]);
}

// ===================================================================

class LogicLoginReq::_Internal {
 public:
};

LogicLoginReq::LogicLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LogicLoginReq)
}
LogicLoginReq::LogicLoginReq(const LogicLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicLoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.udp_ip_){}
    , decltype(_impl_.udp_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.udp_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.udp_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_udp_ip().empty()) {
    _this->_impl_.udp_ip_.Set(from._internal_udp_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.udp_port_ = from._impl_.udp_port_;
  // @@protoc_insertion_point(copy_constructor:LogicLoginReq)
}

inline void LogicLoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.udp_ip_){}
    , decltype(_impl_.udp_port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.udp_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.udp_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogicLoginReq::~LogicLoginReq() {
  // @@protoc_insertion_point(destructor:LogicLoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.udp_ip_.Destroy();
}

void LogicLoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.udp_ip_.ClearToEmpty();
  _impl_.udp_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicLoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string udp_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_udp_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "LogicLoginReq.udp_ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 udp_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.udp_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string udp_ip = 1;
  if (!this->_internal_udp_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_udp_ip().data(), static_cast<int>(this->_internal_udp_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogicLoginReq.udp_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_udp_ip(), target);
  }

  // int32 udp_port = 2;
  if (this->_internal_udp_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_udp_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicLoginReq)
  return target;
}

size_t LogicLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicLoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string udp_ip = 1;
  if (!this->_internal_udp_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_udp_ip());
  }

  // int32 udp_port = 2;
  if (this->_internal_udp_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_udp_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicLoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicLoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicLoginReq::GetClassData() const { return &_class_data_; }


void LogicLoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicLoginReq*>(&to_msg);
  auto& from = static_cast<const LogicLoginReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LogicLoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_udp_ip().empty()) {
    _this->_internal_set_udp_ip(from._internal_udp_ip());
  }
  if (from._internal_udp_port() != 0) {
    _this->_internal_set_udp_port(from._internal_udp_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicLoginReq::CopyFrom(const LogicLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicLoginReq::IsInitialized() const {
  return true;
}

void LogicLoginReq::InternalSwap(LogicLoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.udp_ip_, lhs_arena,
      &other->_impl_.udp_ip_, rhs_arena
  );
  swap(_impl_.udp_port_, other->_impl_.udp_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicLoginReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[26]);
}

// ===================================================================

class OptionEvent::_Internal {
 public:
};

OptionEvent::OptionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OptionEvent)
}
OptionEvent::OptionEvent(const OptionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seatid_){}
    , decltype(_impl_.opt_type_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.seatid_, &from._impl_.seatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.seatid_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:OptionEvent)
}

inline void OptionEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seatid_){0}
    , decltype(_impl_.opt_type_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OptionEvent::~OptionEvent() {
  // @@protoc_insertion_point(destructor:OptionEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OptionEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:OptionEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.seatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.seatid_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 seatid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.seatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 opt_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.opt_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OptionEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->_internal_seatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_seatid(), target);
  }

  // int32 opt_type = 2;
  if (this->_internal_opt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_opt_type(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptionEvent)
  return target;
}

size_t OptionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptionEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->_internal_seatid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seatid());
  }

  // int32 opt_type = 2;
  if (this->_internal_opt_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opt_type());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionEvent::GetClassData() const { return &_class_data_; }


void OptionEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionEvent*>(&to_msg);
  auto& from = static_cast<const OptionEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OptionEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seatid() != 0) {
    _this->_internal_set_seatid(from._internal_seatid());
  }
  if (from._internal_opt_type() != 0) {
    _this->_internal_set_opt_type(from._internal_opt_type());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionEvent::CopyFrom(const OptionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionEvent::IsInitialized() const {
  return true;
}

void OptionEvent::InternalSwap(OptionEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptionEvent, _impl_.y_)
      + sizeof(OptionEvent::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(OptionEvent, _impl_.seatid_)>(
          reinterpret_cast<char*>(&_impl_.seatid_),
          reinterpret_cast<char*>(&other->_impl_.seatid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[27]);
}

// ===================================================================

class FrameOpts::_Internal {
 public:
};

FrameOpts::FrameOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FrameOpts)
}
FrameOpts::FrameOpts(const FrameOpts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameOpts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.opts_){from._impl_.opts_}
    , decltype(_impl_.frameid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.frameid_ = from._impl_.frameid_;
  // @@protoc_insertion_point(copy_constructor:FrameOpts)
}

inline void FrameOpts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.opts_){arena}
    , decltype(_impl_.frameid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FrameOpts::~FrameOpts() {
  // @@protoc_insertion_point(destructor:FrameOpts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameOpts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.opts_.~RepeatedPtrField();
}

void FrameOpts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:FrameOpts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.opts_.Clear();
  _impl_.frameid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameOpts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 frameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .OptionEvent opts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_opts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameOpts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameOpts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frameid = 1;
  if (this->_internal_frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_frameid(), target);
  }

  // repeated .OptionEvent opts = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_opts_size()); i < n; i++) {
    const auto& repfield = this->_internal_opts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameOpts)
  return target;
}

size_t FrameOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FrameOpts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OptionEvent opts = 2;
  total_size += 1UL * this->_internal_opts_size();
  for (const auto& msg : this->_impl_.opts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frameid = 1;
  if (this->_internal_frameid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameOpts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameOpts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameOpts::GetClassData() const { return &_class_data_; }


void FrameOpts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameOpts*>(&to_msg);
  auto& from = static_cast<const FrameOpts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FrameOpts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.opts_.MergeFrom(from._impl_.opts_);
  if (from._internal_frameid() != 0) {
    _this->_internal_set_frameid(from._internal_frameid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameOpts::CopyFrom(const FrameOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FrameOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameOpts::IsInitialized() const {
  return true;
}

void FrameOpts::InternalSwap(FrameOpts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.opts_.InternalSwap(&other->_impl_.opts_);
  swap(_impl_.frameid_, other->_impl_.frameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameOpts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[28]);
}

// ===================================================================

class LogicFrame::_Internal {
 public:
};

LogicFrame::LogicFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LogicFrame)
}
LogicFrame::LogicFrame(const LogicFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unsync_frames_){from._impl_.unsync_frames_}
    , decltype(_impl_.frameid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.frameid_ = from._impl_.frameid_;
  // @@protoc_insertion_point(copy_constructor:LogicFrame)
}

inline void LogicFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unsync_frames_){arena}
    , decltype(_impl_.frameid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogicFrame::~LogicFrame() {
  // @@protoc_insertion_point(destructor:LogicFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unsync_frames_.~RepeatedPtrField();
}

void LogicFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unsync_frames_.Clear();
  _impl_.frameid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 frameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .FrameOpts unsync_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unsync_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frameid = 1;
  if (this->_internal_frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_frameid(), target);
  }

  // repeated .FrameOpts unsync_frames = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unsync_frames_size()); i < n; i++) {
    const auto& repfield = this->_internal_unsync_frames(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicFrame)
  return target;
}

size_t LogicFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FrameOpts unsync_frames = 2;
  total_size += 1UL * this->_internal_unsync_frames_size();
  for (const auto& msg : this->_impl_.unsync_frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frameid = 1;
  if (this->_internal_frameid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicFrame::GetClassData() const { return &_class_data_; }


void LogicFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicFrame*>(&to_msg);
  auto& from = static_cast<const LogicFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LogicFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unsync_frames_.MergeFrom(from._impl_.unsync_frames_);
  if (from._internal_frameid() != 0) {
    _this->_internal_set_frameid(from._internal_frameid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicFrame::CopyFrom(const LogicFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicFrame::IsInitialized() const {
  return true;
}

void LogicFrame::InternalSwap(LogicFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.unsync_frames_.InternalSwap(&other->_impl_.unsync_frames_);
  swap(_impl_.frameid_, other->_impl_.frameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[29]);
}

// ===================================================================

class NextFrameOpt::_Internal {
 public:
};

NextFrameOpt::NextFrameOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NextFrameOpt)
}
NextFrameOpt::NextFrameOpt(const NextFrameOpt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NextFrameOpt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.opts_){from._impl_.opts_}
    , decltype(_impl_.frameid_){}
    , decltype(_impl_.zid_){}
    , decltype(_impl_.matchid_){}
    , decltype(_impl_.seatid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.frameid_, &from._impl_.frameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.seatid_) -
    reinterpret_cast<char*>(&_impl_.frameid_)) + sizeof(_impl_.seatid_));
  // @@protoc_insertion_point(copy_constructor:NextFrameOpt)
}

inline void NextFrameOpt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.opts_){arena}
    , decltype(_impl_.frameid_){0}
    , decltype(_impl_.zid_){0}
    , decltype(_impl_.matchid_){0}
    , decltype(_impl_.seatid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NextFrameOpt::~NextFrameOpt() {
  // @@protoc_insertion_point(destructor:NextFrameOpt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NextFrameOpt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.opts_.~RepeatedPtrField();
}

void NextFrameOpt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NextFrameOpt::Clear() {
// @@protoc_insertion_point(message_clear_start:NextFrameOpt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.opts_.Clear();
  ::memset(&_impl_.frameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.seatid_) -
      reinterpret_cast<char*>(&_impl_.frameid_)) + sizeof(_impl_.seatid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextFrameOpt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 frameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 zid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.zid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matchid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seatid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.seatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .OptionEvent opts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_opts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextFrameOpt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NextFrameOpt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frameid = 1;
  if (this->_internal_frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_frameid(), target);
  }

  // int32 zid = 2;
  if (this->_internal_zid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_zid(), target);
  }

  // int32 matchid = 3;
  if (this->_internal_matchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_matchid(), target);
  }

  // int32 seatid = 4;
  if (this->_internal_seatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_seatid(), target);
  }

  // repeated .OptionEvent opts = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_opts_size()); i < n; i++) {
    const auto& repfield = this->_internal_opts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NextFrameOpt)
  return target;
}

size_t NextFrameOpt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NextFrameOpt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OptionEvent opts = 5;
  total_size += 1UL * this->_internal_opts_size();
  for (const auto& msg : this->_impl_.opts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frameid = 1;
  if (this->_internal_frameid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frameid());
  }

  // int32 zid = 2;
  if (this->_internal_zid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zid());
  }

  // int32 matchid = 3;
  if (this->_internal_matchid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_matchid());
  }

  // int32 seatid = 4;
  if (this->_internal_seatid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seatid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextFrameOpt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NextFrameOpt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextFrameOpt::GetClassData() const { return &_class_data_; }


void NextFrameOpt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NextFrameOpt*>(&to_msg);
  auto& from = static_cast<const NextFrameOpt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NextFrameOpt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.opts_.MergeFrom(from._impl_.opts_);
  if (from._internal_frameid() != 0) {
    _this->_internal_set_frameid(from._internal_frameid());
  }
  if (from._internal_zid() != 0) {
    _this->_internal_set_zid(from._internal_zid());
  }
  if (from._internal_matchid() != 0) {
    _this->_internal_set_matchid(from._internal_matchid());
  }
  if (from._internal_seatid() != 0) {
    _this->_internal_set_seatid(from._internal_seatid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextFrameOpt::CopyFrom(const NextFrameOpt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NextFrameOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextFrameOpt::IsInitialized() const {
  return true;
}

void NextFrameOpt::InternalSwap(NextFrameOpt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.opts_.InternalSwap(&other->_impl_.opts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NextFrameOpt, _impl_.seatid_)
      + sizeof(NextFrameOpt::_impl_.seatid_)
      - PROTOBUF_FIELD_OFFSET(NextFrameOpt, _impl_.frameid_)>(
          reinterpret_cast<char*>(&_impl_.frameid_),
          reinterpret_cast<char*>(&other->_impl_.frameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NextFrameOpt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[30]);
}

// ===================================================================

class GameFinishedRes::_Internal {
 public:
};

GameFinishedRes::GameFinishedRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameFinishedRes)
}
GameFinishedRes::GameFinishedRes(const GameFinishedRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameFinishedRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.winner_teamid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.winner_teamid_ = from._impl_.winner_teamid_;
  // @@protoc_insertion_point(copy_constructor:GameFinishedRes)
}

inline void GameFinishedRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.winner_teamid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameFinishedRes::~GameFinishedRes() {
  // @@protoc_insertion_point(destructor:GameFinishedRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameFinishedRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameFinishedRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameFinishedRes::Clear() {
// @@protoc_insertion_point(message_clear_start:GameFinishedRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.winner_teamid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameFinishedRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 winner_teamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.winner_teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameFinishedRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameFinishedRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 winner_teamid = 1;
  if (this->_internal_winner_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_winner_teamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameFinishedRes)
  return target;
}

size_t GameFinishedRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameFinishedRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 winner_teamid = 1;
  if (this->_internal_winner_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_winner_teamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameFinishedRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameFinishedRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameFinishedRes::GetClassData() const { return &_class_data_; }


void GameFinishedRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameFinishedRes*>(&to_msg);
  auto& from = static_cast<const GameFinishedRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameFinishedRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_winner_teamid() != 0) {
    _this->_internal_set_winner_teamid(from._internal_winner_teamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameFinishedRes::CopyFrom(const GameFinishedRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameFinishedRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFinishedRes::IsInitialized() const {
  return true;
}

void GameFinishedRes::InternalSwap(GameFinishedRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.winner_teamid_, other->_impl_.winner_teamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameFinishedRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[31]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GuestLoginReq*
Arena::CreateMaybeMessage< ::GuestLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GuestLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UserLoginReq*
Arena::CreateMaybeMessage< ::UserLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UserCenterInfo*
Arena::CreateMaybeMessage< ::UserCenterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserCenterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GuestLoginRes*
Arena::CreateMaybeMessage< ::GuestLoginRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GuestLoginRes >(arena);
}
template<> PROTOBUF_NOINLINE ::UserLoginRes*
Arena::CreateMaybeMessage< ::UserLoginRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserLoginRes >(arena);
}
template<> PROTOBUF_NOINLINE ::EditProfileReq*
Arena::CreateMaybeMessage< ::EditProfileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EditProfileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::EditProfileRes*
Arena::CreateMaybeMessage< ::EditProfileRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EditProfileRes >(arena);
}
template<> PROTOBUF_NOINLINE ::GuestUpgradeReq*
Arena::CreateMaybeMessage< ::GuestUpgradeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GuestUpgradeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::GuestUpgradeRes*
Arena::CreateMaybeMessage< ::GuestUpgradeRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GuestUpgradeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::LogoutRes*
Arena::CreateMaybeMessage< ::LogoutRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogoutRes >(arena);
}
template<> PROTOBUF_NOINLINE ::GetUGameInfo*
Arena::CreateMaybeMessage< ::GetUGameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetUGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GetUGameInfoRes*
Arena::CreateMaybeMessage< ::GetUGameInfoRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetUGameInfoRes >(arena);
}
template<> PROTOBUF_NOINLINE ::RecvLoginBonusRes*
Arena::CreateMaybeMessage< ::RecvLoginBonusRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RecvLoginBonusRes >(arena);
}
template<> PROTOBUF_NOINLINE ::WorldRankUchip*
Arena::CreateMaybeMessage< ::WorldRankUchip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WorldRankUchip >(arena);
}
template<> PROTOBUF_NOINLINE ::GetWorldRankUchipRes*
Arena::CreateMaybeMessage< ::GetWorldRankUchipRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetWorldRankUchipRes >(arena);
}
template<> PROTOBUF_NOINLINE ::GetSysMsgReq*
Arena::CreateMaybeMessage< ::GetSysMsgReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetSysMsgReq >(arena);
}
template<> PROTOBUF_NOINLINE ::GetSysMsgRes*
Arena::CreateMaybeMessage< ::GetSysMsgRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetSysMsgRes >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicLoginRes*
Arena::CreateMaybeMessage< ::LogicLoginRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicLoginRes >(arena);
}
template<> PROTOBUF_NOINLINE ::EnterZoneReq*
Arena::CreateMaybeMessage< ::EnterZoneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EnterZoneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::EnterZoneRes*
Arena::CreateMaybeMessage< ::EnterZoneRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EnterZoneRes >(arena);
}
template<> PROTOBUF_NOINLINE ::OnOtherEnteredMatch*
Arena::CreateMaybeMessage< ::OnOtherEnteredMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OnOtherEnteredMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::EnterMatch*
Arena::CreateMaybeMessage< ::EnterMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EnterMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::QuitMatchRes*
Arena::CreateMaybeMessage< ::QuitMatchRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QuitMatchRes >(arena);
}
template<> PROTOBUF_NOINLINE ::OnOtherQuittedMatch*
Arena::CreateMaybeMessage< ::OnOtherQuittedMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OnOtherQuittedMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CharacterInfo*
Arena::CreateMaybeMessage< ::CharacterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CharacterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStart*
Arena::CreateMaybeMessage< ::GameStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicLoginReq*
Arena::CreateMaybeMessage< ::LogicLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::OptionEvent*
Arena::CreateMaybeMessage< ::OptionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OptionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::FrameOpts*
Arena::CreateMaybeMessage< ::FrameOpts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FrameOpts >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicFrame*
Arena::CreateMaybeMessage< ::LogicFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::NextFrameOpt*
Arena::CreateMaybeMessage< ::NextFrameOpt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NextFrameOpt >(arena);
}
template<> PROTOBUF_NOINLINE ::GameFinishedRes*
Arena::CreateMaybeMessage< ::GameFinishedRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameFinishedRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
